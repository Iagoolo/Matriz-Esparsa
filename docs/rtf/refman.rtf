{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Matriz Esparsa  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
2.1 \par
}}Matriz Esparsa}
{\comment Gerado por doxygen 1.9.8.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Matriz Esparsa}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 2.1\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Matriz Esparsa\par \pard\plain 
{\tc\tcl1 \v Matriz Esparsa}
{\xe \v Matriz Esparsa}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
     \par
{\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \zwjEste projeto implementa uma {\b Matriz} Esparsa eficiente, otimizando espa\'E7o ao armazenar somente valores diferentes de zero. \par
}{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Ajustes e melhorias
\par}
{\tc\tcl3 \v Ajustes e melhorias}
As pr\'F3ximas atualiza\'E7\'F5es para a {\b Matriz} Esparsa ser\'E3o:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
[x] Implementar inser\'E7\'E3o e remo\'E7\'E3o din\'E2micas\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
[ ] Otimizar a busca de elementos\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
[x] Adicionar testes automatizados\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
[ ] Melhorar documenta\'E7\'E3o de uso\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
[ ] Suporte a diferentes tipos de dados\par}
\par
\par}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'F0\'9F\'92\'BB Pr\'C3\'A9-requisitos
\par}
{\tc\tcl2 \v \'F0\'9F\'92\'BB Pr\'C3\'A9-requisitos}
Antes de come\'E7ar, verifique se voc\'EA atendeu aos seguintes requisitos:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Git instalado\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Compilador C++ instalado\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Makefile instalado\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sistema operacional Windows / Linux / Mac\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Consultou a {\f2 documenta\'E7\'E3o} do projeto\par}
\par
\par}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'F0\'9F\'9A\'80 Compilando a Matriz Esparsa
\par}
{\tc\tcl2 \v \'F0\'9F\'9A\'80 Compilando a Matriz Esparsa}
Para compilar a {\b Matriz} Esparsa, siga estas etapas:\par
Dentro do diret\'F3rio do projeto, execute o seguinte comando:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Linux e macOS:\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make\par
}
\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Windows:\par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mingw32-make\par
}
\par}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'E2\'98\'95 Executando a Matriz Esparsa
\par}
{\tc\tcl2 \v \'E2\'98\'95 Executando a Matriz Esparsa}
Para usar a {\b Matriz} Esparsa, execute o seguinte comando:\par
Dentro do diret\'F3rio do projeto, execute o seguinte comando:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Linux e macOS: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./bin/Matriz-Esparsa\par
}
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Windows: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bin/Matriz-Esparsa.exe\par
}
 Personalize os exemplos conforme necess\'E1rio.\par}
\par
\par}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'F0\'9F\'93\'AB Contribuindo para Matriz Esparsa
\par}
{\tc\tcl2 \v \'F0\'9F\'93\'AB Contribuindo para Matriz Esparsa}
Para contribuir com a {\b Matriz} Esparsa:\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Bifurque este reposit\'F3rio.\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
2.\tab Crie um branch: {\f2 git checkout -b <nome_branch>} .\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
3.\tab Fa\'E7a suas altera\'E7\'F5es e confirme-as: \'91git commit -m \'92<mensagem_commit>'{\f2 } \par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
4.\tab {\f2 Envie para o branch original:} git push origin Matriz-Esparsa/<local>`\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
5.\tab Crie a solicita\'E7\'E3o de pull.\par}
\par
Consulte {\f2 como criar uma solicita\'E7\'E3o pull}.\par}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'F0\'9F\'A4\'9D Colaboradores
\par}
{\tc\tcl2 \v \'F0\'9F\'A4\'9D Colaboradores}
Agradecimentos especiais aos seguintes colaboradores:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\qc {\f2 \par
 {\sub  Iago de Oliveira} }     \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\sub } \par}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'F0\'9F\'93\'9D Licen\'C3\'A7a
\par}
{\tc\tcl2 \v \'F0\'9F\'93\'9D Licen\'C3\'A7a}
{\sub } \par
{\sub Este projeto est\'E1 sob licen\'E7a. Consulte [LICEN\'C7A](LICENSE) para mais informa\'E7\'F5es. } \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Componentes\par \pard\plain 
{\tc \v \'CDndice dos Componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Aqui est\'E3o as classes, estruturas, uni\'F5es e interfaces e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b IteratorM} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador para percorrer uma matriz esparsa })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Matriz} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma matriz esparsa })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Node} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um n\'F3 em uma matriz esparsa })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Arquivos\par \pard\plain 
{\tc \v \'CDndice dos Arquivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Arquivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os arquivos e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b include/IteratorM/{\b IteratorM.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/manipMatriz/{\b manipMatriz.hpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Menu para as fun\'E7\'F5es para manipula\'E7\'E3o de matrizes })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/matriz/{\b Matriz.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/node/{\b Node.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/utils/{\b utils.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/main/{\b main.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para manipula\'E7\'E3o de matrizes esparsas })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/matriz/{\b Matriz.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b tests/{\b TestMatriz.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de teste para opera\'E7\'F5es com matrizes esparsas })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Classes{\tc \v Classes}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe IteratorM\par \pard\plain 
{\tc\tcl2 \v IteratorM}
{\xe \v IteratorM}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador para percorrer uma matriz esparsa. }}\par
{
{\f2 #include <IteratorM.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b iterator_category} = std::forward_iterator_tag\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b difference_type} = std::ptrdiff_t\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b value_type} = {\b double}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b pointer} = {\b double} *\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b reference} = {\b double} &\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} ({\b Node} *cabecalho, {\b Node} *current)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor com par\'E2metros. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reference} {\b operator*} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desreferencia\'E7\'E3o. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b reference} {\b operator*} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desreferencia\'E7\'E3o (const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b pointer} {\b operator->} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de acesso a membro (const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b pointer} {\b operator->} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de acesso a membro (const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} & {\b operator++} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de incremento prefixado. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b bool} {\b operator==} ({\b const} {\b IteratorM} &{\b it}) {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de igualdade. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b bool} {\b operator!=} ({\b const} {\b IteratorM} &{\b it}) {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desigualdade. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b class} {\b Matriz}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador para percorrer uma matriz esparsa. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A classe {\b IteratorM} fornece um iterador para percorrer os elementos de uma matriz esparsa.\par
@friend class {\b Matriz} \par
}{
Defini\'E7\'E3o na linha {\b 16} do arquivo {\b IteratorM.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v difference_type\:IteratorM}
{\xe \v IteratorM\:difference_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b IteratorM::difference_type} =  std::ptrdiff_t}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 26} do arquivo {\b IteratorM.hpp}.}\par
}
{\xe \v iterator_category\:IteratorM}
{\xe \v IteratorM\:iterator_category}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b IteratorM::iterator_category} =  std::forward_iterator_tag}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 25} do arquivo {\b IteratorM.hpp}.}\par
}
{\xe \v pointer\:IteratorM}
{\xe \v IteratorM\:pointer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b IteratorM::pointer} =  {\b double} *}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 28} do arquivo {\b IteratorM.hpp}.}\par
}
{\xe \v reference\:IteratorM}
{\xe \v IteratorM\:reference}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b IteratorM::reference} =  {\b double} &}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 29} do arquivo {\b IteratorM.hpp}.}\par
}
{\xe \v value_type\:IteratorM}
{\xe \v IteratorM\:value_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b IteratorM::value_type} =  {\b double}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 27} do arquivo {\b IteratorM.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v IteratorM\:IteratorM}
{\xe \v IteratorM\:IteratorM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IteratorM::IteratorM (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa o iterador com ponteiros nulos. \par
}{
Defini\'E7\'E3o na linha {\b 36} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00036 : cabecalho({\cf17 nullptr}), current({\cf17 nullptr}) \{\}\par
}
}
{\xe \v IteratorM\:IteratorM}
{\xe \v IteratorM\:IteratorM}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
IteratorM::IteratorM ({\b Node} *  {\i cabecalho}, {\b Node} *  {\i current}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor com par\'E2metros. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa o iterador com o n\'F3 de cabe\'E7alho e o n\'F3 atual.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cabecalho} \cell }{Ponteiro para o n\'F3 de cabe\'E7alho. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i current} \cell }{Ponteiro para o n\'F3 atual (padr\'E3o \'E9 nullptr). \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 46} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00046                                               : cabecalho(cabecalho), current(current)\par
00047     \{\par
00048         {\cf19 while} (current == cabecalho)\par
00049         \{\par
00050             cabecalho = cabecalho->abaixo;\par
00051             current = current->abaixo->direita;\par
00052         \}\par
00053     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator!=\:IteratorM}
{\xe \v IteratorM\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b bool} IteratorM::operator!= ({\b const} {\b IteratorM} &  {\i it}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desigualdade. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compara se dois iteradores s\'E3o diferentes.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i it} \cell }{Iterador a ser comparado. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true se os iteradores s\'E3o diferentes, false caso contr\'E1rio. \par
}}}{
Defini\'E7\'E3o na linha {\b 144} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00145     \{\par
00146         {\cf19 return} cabecalho != it.cabecalho || current != it.current;\par
00147     \}\par
}
}
{\xe \v operator*\:IteratorM}
{\xe \v IteratorM\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b reference} IteratorM::operator* (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desreferencia\'E7\'E3o. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna uma refer\'EAncia ao valor do n\'F3 atual.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Refer\'EAncia ao valor do n\'F3 atual. \par
}}}{
Defini\'E7\'E3o na linha {\b 62} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00063     \{\par
00064         {\cf19 return} current->valor;\par
00065     \}\par
}
}
{\xe \v operator*\:IteratorM}
{\xe \v IteratorM\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b reference} IteratorM::operator* () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de desreferencia\'E7\'E3o (const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna uma refer\'EAncia constante ao valor do n\'F3 atual.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Refer\'EAncia constante ao valor do n\'F3 atual. \par
}}}{
Defini\'E7\'E3o na linha {\b 74} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00075     \{\par
00076         {\cf19 return} current->valor;\par
00077     \}\par
}
}
{\xe \v operator++\:IteratorM}
{\xe \v IteratorM\:operator++}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IteratorM} & IteratorM::operator++ (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de incremento prefixado. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Avan\'E7a o iterador para o pr\'F3ximo elemento na matriz esparsa.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Refer\'EAncia ao pr\'F3prio iterador ap\'F3s o incremento. \par
}}}{
Defini\'E7\'E3o na linha {\b 110} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00111     \{\par
00112         current = current->direita;\par
00113 \par
00114         {\cf19 while} (current == cabecalho)\par
00115         \{\par
00116             cabecalho = cabecalho->abaixo;\par
00117             current = current->abaixo->direita;\par
00118         \}\par
00119 \par
00120         {\cf19 return} *{\cf17 this};\par
00121     \}\par
}
}
{\xe \v operator->\:IteratorM}
{\xe \v IteratorM\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b pointer} IteratorM::operator-> (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de acesso a membro (const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna um ponteiro constante para o valor do n\'F3 atual.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Ponteiro constante para o valor do n\'F3 atual. \par
}}}{
Defini\'E7\'E3o na linha {\b 86} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00087     \{\par
00088         {\cf19 return} &current->valor;\par
00089     \}\par
}
}
{\xe \v operator->\:IteratorM}
{\xe \v IteratorM\:operator->}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b pointer} IteratorM::operator-> () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de acesso a membro (const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna um ponteiro constante para o valor do n\'F3 atual.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Ponteiro constante para o valor do n\'F3 atual. \par
}}}{
Defini\'E7\'E3o na linha {\b 98} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00099     \{\par
00100         {\cf19 return} &current->valor;\par
00101     \}\par
}
}
{\xe \v operator==\:IteratorM}
{\xe \v IteratorM\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b bool} IteratorM::operator== ({\b const} {\b IteratorM} &  {\i it}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Operador de igualdade. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Compara se dois iteradores s\'E3o iguais.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i it} \cell }{Iterador a ser comparado. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true se os iteradores s\'E3o iguais, false caso contr\'E1rio. \par
}}}{
Defini\'E7\'E3o na linha {\b 131} do arquivo {\b IteratorM.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00132     \{\par
00133         {\cf19 return} cabecalho == it.cabecalho && current == it.current;\par
00134     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos s\'EDmbolos amigos e relacionados\par
\pard\plain 
{\xe \v Matriz\:IteratorM}
{\xe \v IteratorM\:Matriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b friend} {\b class} {\b Matriz}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 18} do arquivo {\b IteratorM.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/IteratorM/{\b IteratorM.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Matriz\par \pard\plain 
{\tc\tcl2 \v Matriz}
{\xe \v Matriz}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma matriz esparsa. }}\par
{
{\f2 #include <Matriz.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o da classe {\b Matriz}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} ({\b const} {\b int} &{\b ln}, {\b const} {\b int} &{\b cl})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Matriz} que inicializa uma matriz esparsa com linhas e colunas especificadas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} ({\b const} {\b Matriz} &{\b outra})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor de c\'F3pia para a classe {\b Matriz}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Matriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Matriz}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} {\b begin} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa um iterador que aponta para o primeiro elemento significativo da matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} {\b end} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o final da matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} {\b begin} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o primeiro elemento significativo da matriz (vers\'E3o const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IteratorM} {\b end} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o final da matriz (vers\'E3o const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} {\b operator=} ({\b Matriz} {\b matriz})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sobrecarga do operador de atribui\'E7\'E3o para a classe {\b Matriz}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b getLinhas} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a quantidade de linhas da matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b getColunas} () {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a quantidade de colunas da matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b limpar} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Limpa os dados armazenados na matriz esparsa. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b insert} ({\b const} {\b int} &{\b posI}, {\b const} {\b int} &{\b posJ}, {\b const} {\b double} &{\b value})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insere um valor em uma posi\'E7\'E3o espec\'EDfica da matriz esparsa. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b double} {\b get} ({\b const} {\b int} &{\b posI}, {\b const} {\b int} &{\b posJ})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor armazenado na matriz em uma posi\'E7\'E3o espec\'EDfica. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b double} {\b get} ({\b const} {\b int} &{\b posI}, {\b const} {\b int} &{\b posJ}) {\b const}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor armazenado na matriz em uma posi\'E7\'E3o espec\'EDfica (vers\'E3o const). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b print} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime a matriz no console. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma matriz esparsa. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A classe {\b Matriz} implementa uma estrutura de dados para armazenar matrizes esparsas, onde a maioria dos elementos s\'E3o zeros. Utiliza uma lista encadeada de n\'F3s para armazenar apenas os elementos n\'E3o-zero, economizando mem\'F3ria e permitindo opera\'E7\'F5es eficientes.\par
A matriz \'E9 representada por um n\'F3-cabe\'E7alho que atua como sentinela para a estrutura interna. Este n\'F3-cabe\'E7alho aponta para si mesmo em ambas as dire\'E7\'F5es (direita e abaixo) quando a matriz est\'E1 vazia. A classe fornece m\'E9todos para inserir, acessar e remover elementos, al\'E9m de obter o n\'FAmero de linhas e colunas e imprimir a matriz.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A matriz \'E9 inicializada com um n\'F3-cabe\'E7alho que aponta para si mesmo.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Os \'EDndices das linhas e colunas come\'E7am em 1.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A inser\'E7\'E3o de elementos \'E9 feita apenas em posi\'E7\'F5es v\'E1lidas (dentro dos limites da matriz).\par}
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Aviso\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A tentativa de acessar ou inserir elementos em posi\'E7\'F5es inv\'E1lidas (fora dos limites da matriz) resultar\'E1 em uma exce\'E7\'E3o std::invalid_argument. \par}
}}}{
Defini\'E7\'E3o na linha {\b 32} do arquivo {\b Matriz.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Matriz\:Matriz}
{\xe \v Matriz\:Matriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Matriz::Matriz ()}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor padr\'E3o da classe {\b Matriz}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este construtor inicializa os valores de linhas e colunas com zero e cria o n\'F3-cabe\'E7alho. Este n\'F3-cabe\'E7alho atua como sentinela para a estrutura interna da matriz, permitindo opera\'E7\'F5es de inser\'E7\'E3o, remo\'E7\'E3o e acesso eficientes. Inicialmente, o n\'F3-cabe\'E7alho aponta para si mesmo em ambas as dire\'E7\'F5es (direita e abaixo), indicando que a matriz ainda n\'E3o possui elementos de dados. \par
}{
Defini\'E7\'E3o na linha {\b 4} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00004                : cabecalho({\cf17 new} Node(0, 0, 0)), linhas(0), colunas(0)\par
00005 \{\par
00006     cabecalho->direita = cabecalho->abaixo = cabecalho;\par
00007 \}\par
}
}
{\xe \v Matriz\:Matriz}
{\xe \v Matriz\:Matriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Matriz::Matriz ({\b const} {\b int} &  {\i ln}, {\b const} {\b int} &  {\i cl})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Matriz} que inicializa uma matriz esparsa com linhas e colunas especificadas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este construtor verifica primeiro se os valores passados para o n\'FAmero de linhas (lin) e colunas (col) s\'E3o maiores que zero. Caso contr\'E1rio, \'E9 lan\'E7ada uma exce\'E7\'E3o std::invalid_argument, garantindo que somente matrizes com dimens\'F5es v\'E1lidas sejam criadas.\par
Em seguida, s\'E3o inicializadas:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
As vari\'E1veis internas para armazenar a quantidade de linhas e colunas.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Um n\'F3-cabe\'E7alho que serve como refer\'EAncia principal da estrutura, mantendo la\'E7os para si mesmo tanto \'E0 direita quanto abaixo.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Um conjunto de n\'F3s auxiliares, linkados entre si de maneira circular:{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
N\'F3s respons\'E1veis pelas linhas (um n\'F3 para cada linha),\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
N\'F3s respons\'E1veis pelas colunas (um n\'F3 para cada coluna).\par}
}
Cada n\'F3 de linha aponta para si mesmo \'E0 direita, enquanto cada n\'F3 de coluna aponta para si mesmo abaixo, formando estruturas circulares independentes para linhas e colunas, todas centralizadas no n\'F3-cabe\'E7alho.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lin} \cell }{Quantidade de linhas da matriz (deve ser um valor maior que zero). \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i col} \cell }{Quantidade de colunas da matriz (deve ser um valor maior que zero).\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Exce\'E7\'E3o lan\'E7ada quando lin ou col s\'E3o menores ou iguais a zero. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 9} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00011 \{\par
00012     {\cf19 if} (lin <= 0 || col <= 0)\par
00013         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Tamanho de matriz inv\'E1lido, insira valores maiores que 0"});\par
00014 \par
00015     linhas = lin;\par
00016     colunas = col;\par
00017 \par
00018     cabecalho = {\cf17 new} Node(0, 0, 0);\par
00019     cabecalho->direita = cabecalho->abaixo = cabecalho;\par
00020 \par
00021     Node *auxLinha = cabecalho;\par
00022     {\cf19 for} ({\cf18 int} i = 1; i <= lin; i++)\par
00023     \{\par
00024         Node *novo = {\cf17 new} Node(i, 0, 0);\par
00025         auxLinha->abaixo = novo;\par
00026         novo->direita = novo;\par
00027         auxLinha = novo;\par
00028     \}\par
00029     auxLinha->abaixo = cabecalho;\par
00030 \par
00031     Node *auxColuna = cabecalho;\par
00032     {\cf19 for} ({\cf18 int} j = 1; j <= col; j++)\par
00033     \{\par
00034         Node *novo = {\cf17 new} Node(0, j, 0);\par
00035         auxColuna->direita = novo;\par
00036         novo->abaixo = novo;\par
00037         auxColuna = novo;\par
00038     \}\par
00039     auxColuna->direita = cabecalho;\par
00040 \}\par
}
}
{\xe \v Matriz\:Matriz}
{\xe \v Matriz\:Matriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Matriz::Matriz ({\b const} {\b Matriz} &  {\i outra})}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor de c\'F3pia para a classe {\b Matriz}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este construtor cria uma nova inst\'E2ncia de {\b Matriz} a partir de outra inst\'E2ncia existente, realizando uma c\'F3pia profunda dos elementos da matriz original. Inicialmente, ele chama o construtor principal da classe, passando como argumentos o n\'FAmero de linhas e colunas da matriz a ser copiada, garantindo que a nova matriz possua a mesma estrutura de armazenamento.\par
Ap\'F3s a aloca\'E7\'E3o da estrutura adequada, o construtor itera por todos os elementos da matriz original ("outra") usando um iterador ({\b IteratorM}). Para cada elemento encontrado, o m\'E9todo insert \'E9 invocado para inserir o valor na nova matriz, mantendo a posi\'E7\'E3o indicada pelos atributos "linha" e "coluna" presentes na estrutura apontada pelo iterador.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i outra} \cell }{Refer\'EAncia para a inst\'E2ncia da matriz que ser\'E1 copiada. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 42} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042                                   : Matriz(outra.linhas, outra.colunas)\par
00043 \{\par
00044     {\cf19 for} (IteratorM it = outra.begin(); it != outra.end(); ++it)\par
00045         this->insert(it.current->linha, it.current->coluna, *it);\par
00046 \}\par
}
}
{\xe \v ~Matriz\:Matriz}
{\xe \v Matriz\:~Matriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Matriz::~Matriz ()}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destrutor da classe {\b Matriz}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este destrutor \'E9 respons\'E1vel por desalocar toda a mem\'F3ria alocada pela matriz esparsa, incluindo os n\'F3s de dados e os n\'F3s sentinela.\par
A opera\'E7\'E3o \'E9 realizada em v\'E1rias etapas para evitar vazamento de mem\'F3ria e acessos inv\'E1lidos:\par
{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Verifica se o n\'F3 cabe\'E7alho \'E9 nulo. Se for, a matriz est\'E1 vazia e n\'E3o h\'E1 nada a ser desalocado\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Inicia a partir do primeiro n\'F3 sentinela abaixo do cabe\'E7alho e, enquanto n\'E3o retorna para o cabe\'E7alho, desaloca cada n\'F3.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Inicia a partir do primeiro n\'F3 sentinela \'E0 direita do cabe\'E7alho e, seguindo at\'E9 retornar ao cabe\'E7alho, desaloca cada n\'F3.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ap\'F3s remover todos os n\'F3s sentinela nas linhas e colunas, o cabe\'E7alho \'E9 removido.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O ponteiro do cabe\'E7alho \'E9 ent\'E3o definido como nullptr para evitar acessos inv\'E1lidos posteriores.\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Este m\'E9todo garante que todos os n\'F3s foram corretamente liberados, evitando vazamentos de mem\'F3ria e a tentativa de desalocar a mesma mem\'F3ria mais de uma vez. \par
}}}{
Defini\'E7\'E3o na linha {\b 88} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00089 \{\par
00090     {\cf19 if} (cabecalho == {\cf17 nullptr})\par
00091         {\cf19 return};\par
00092 \par
00093     limpar();\par
00094 \par
00095     Node *linhaAtual = cabecalho->abaixo;\par
00096     {\cf19 while} (linhaAtual != cabecalho)\par
00097     \{\par
00098         Node *proximoLinha = linhaAtual->abaixo;\par
00099         {\cf17 delete} linhaAtual;\par
00100         linhaAtual = proximoLinha;\par
00101     \}\par
00102 \par
00103     Node *colunaAtual = cabecalho->direita;\par
00104     {\cf19 while} (colunaAtual != cabecalho)\par
00105     \{\par
00106         Node *proximoColuna = colunaAtual->direita;\par
00107         {\cf17 delete} colunaAtual;\par
00108         colunaAtual = proximoColuna;\par
00109     \}\par
00110 \par
00111     {\cf17 delete} cabecalho;\par
00112     cabecalho = {\cf17 nullptr};\par
00113 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v begin\:Matriz}
{\xe \v Matriz\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IteratorM} Matriz::begin ()}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Inicializa um iterador que aponta para o primeiro elemento significativo da matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o permite obter um iterador para o primeiro n\'F3 principal da matriz esparsa (localizado logo abaixo do cabe\'E7alho), facilitando o acesso aos elementos e a manipula\'E7\'E3o da estrutura de dados. O iterador retornado aponta para o primeiro n\'F3 relevante da linha principal, permitindo assim percorrer as colunas de forma apropriada.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna um objeto de iterador ({\b IteratorM}) posicionado no in\'EDcio da matriz esparsa.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Esse m\'E9todo presume que a matriz est\'E1 devidamente inicializada e que o cabe\'E7alho aponta para posicionamentos v\'E1lidos da estrutura. \par
}}}{
Defini\'E7\'E3o na linha {\b 48} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00049 \{\par
00050     {\cf19 return} IteratorM(cabecalho->abaixo, cabecalho->abaixo->direita);\par
00051 \}\par
}
}
{\xe \v begin\:Matriz}
{\xe \v Matriz\:begin}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IteratorM} Matriz::begin () const}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o primeiro elemento significativo da matriz (vers\'E3o const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o \'E9 uma sobrecarga da fun\'E7\'E3o {\b begin()} que permite obter um iterador para o primeiro n\'F3 principal da matriz esparsa, sem permitir altera\'E7\'F5es nos valores da matriz. O iterador retornado aponta para o primeiro n\'F3 relevante\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b IteratorM} Objeto iterador apontando para o in\'EDcio da matriz. \par
}}}{
Defini\'E7\'E3o na linha {\b 58} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00059 \{\par
00060     {\cf19 return} IteratorM(cabecalho->abaixo, cabecalho->abaixo->direita);\par
00061 \}\par
}
}
{\xe \v end\:Matriz}
{\xe \v Matriz\:end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IteratorM} Matriz::end ()}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o final da matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o prov\'EA um objeto {\b IteratorM} associado \'E0 lista principal de n\'F3s da matriz esparsa, indicando uma posi\'E7\'E3o que corresponde ao final da estrutura de dados.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b IteratorM} Objeto iterador apontando para o final da matriz. \par
}}}{
Defini\'E7\'E3o na linha {\b 53} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00054 \{\par
00055     {\cf19 return} IteratorM(cabecalho, cabecalho->direita);\par
00056 \}\par
}
}
{\xe \v end\:Matriz}
{\xe \v Matriz\:end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b IteratorM} Matriz::end () const}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador que aponta para o final da matriz (vers\'E3o const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o \'E9 uma sobrecarga da fun\'E7\'E3o {\b end()} que permite obter um iterador para o final da matriz esparsa, sem permitir altera\'E7\'F5es nos valores da matriz. O iterador retornado aponta para o final da estrutura de dados.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b IteratorM} Objeto iterador apontando para o final da matriz. \par
}}}{
Defini\'E7\'E3o na linha {\b 63} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00064 \{\par
00065     {\cf19 return} IteratorM(cabecalho, cabecalho->direita);\par
00066 \}\par
}
}
{\xe \v get\:Matriz}
{\xe \v Matriz\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b double} Matriz::get ({\b const} {\b int} &  {\i posI}, {\b const} {\b int} &  {\i posJ})}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor armazenado na matriz em uma posi\'E7\'E3o espec\'EDfica. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o busca o valor localizado na linha e coluna indicadas por {\f2 posI}  e {\f2 posJ} . Se n\'E3o houver nenhum valor armazenado nessa posi\'E7\'E3o (ou seja, se o n\'F3 correspondente n\'E3o existir), a fun\'E7\'E3o retornar\'E1 0. Caso a posi\'E7\'E3o seja inv\'E1lida, ser\'E1 lan\'E7ada uma exce\'E7\'E3o do tipo std::invalid_argument.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posI} \cell }{\'CDndice da linha solicitada. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posJ} \cell }{\'CDndice da coluna solicitada. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
O valor do tipo double encontrado na posi\'E7\'E3o indicada, ou 0 caso n\'E3o exista nenhum valor armazenado.\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Se {\f2 posI}  ou {\f2 posJ}  forem menores ou iguais a 0 ou excederem as dimens\'F5es da matriz. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 200} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00201 \{\par
00202     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00203         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de acesso inv\'E1lido"});\par
00204 \par
00205     IteratorM it = begin();\par
00206 \par
00207     {\cf19 while} (it != end())\par
00208     \{\par
00209         {\cf19 if} (it.current->linha == posI && it.current->coluna == posJ)\par
00210             {\cf19 return} *it;\par
00211 \par
00212         {\cf19 if} (it.current->linha > posI || (it.current->linha == posI && it.current->coluna > posJ))\par
00213             {\cf19 return} 0;\par
00214 \par
00215         ++it;\par
00216     \}\par
00217 \par
00218     {\cf19 return} 0;\par
00219 \}\par
}
}
{\xe \v get\:Matriz}
{\xe \v Matriz\:get}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b double} Matriz::get ({\b const} {\b int} &  {\i posI}, {\b const} {\b int} &  {\i posJ}) const}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna o valor armazenado na matriz em uma posi\'E7\'E3o espec\'EDfica (vers\'E3o const). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Mesma funcionalidade da vers\'E3o n\'E3o-const, mas permite consultar valores em matrizes constantes, sem modific\'E1-las.\par
Esta fun\'E7\'E3o \'E9 uma sobrecarga da fun\'E7\'E3o {\b get()} que permite consultar valores em matrizes constantes, sem alterar seu conte\'FAdo. A diferen\'E7a \'E9 que esta vers\'E3o n\'E3o permite alterar o conte\'FAdo da matriz, garantindo a integridade dos dados.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posI} \cell }{\'CDndice da linha solicitada. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posJ} \cell }{\'CDndice da coluna solicitada. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
O valor do tipo double encontrado na posi\'E7\'E3o indicada, ou 0\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Se {\f2 posI}  ou {\f2 posJ}  forem menores ou iguais a 0 ou excederem as dimens\'F5es da matriz. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 221} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00222 \{\par
00223     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00224         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de acesso inv\'E1lido"});\par
00225 \par
00226     IteratorM it = begin();\par
00227 \par
00228     {\cf19 while} (it != end())\par
00229     \{\par
00230         {\cf19 if} (it.current->linha == posI && it.current->coluna == posJ)\par
00231             {\cf19 return} *it;\par
00232 \par
00233         {\cf19 if} (it.current->linha > posI || (it.current->linha == posI && it.current->coluna > posJ))\par
00234             {\cf19 return} 0;\par
00235 \par
00236         ++it;\par
00237     \}\par
00238 \par
00239     {\cf19 return} 0;\par
00240 \}\par
}
}
{\xe \v getColunas\:Matriz}
{\xe \v Matriz\:getColunas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} Matriz::getColunas () const}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a quantidade de colunas da matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
N\'FAmero de colunas da matriz.\par
}}Semelhante a {\b getLinhas()}, utilizada para consultar o total de colunas da estrutura. \par
}{
Defini\'E7\'E3o na linha {\b 83} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00084 \{\par
00085     {\cf19 return} colunas;\par
00086 \}\par
}
}
{\xe \v getLinhas\:Matriz}
{\xe \v Matriz\:getLinhas}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} Matriz::getLinhas () const}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Retorna a quantidade de linhas da matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
N\'FAmero de linhas da matriz.\par
}}Esta fun\'E7\'E3o permite consultar o total de linhas para verifica\'E7\'E3o de limites ou para itera\'E7\'F5es relacionadas ao tamanho da matriz. \par
}{
Defini\'E7\'E3o na linha {\b 78} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00079 \{\par
00080     {\cf19 return} linhas;\par
00081 \}\par
}
}
{\xe \v insert\:Matriz}
{\xe \v Matriz\:insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} Matriz::insert ({\b const} {\b int} &  {\i posI}, {\b const} {\b int} &  {\i posJ}, {\b const} {\b double} &  {\i value})}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Insere um valor em uma posi\'E7\'E3o espec\'EDfica da matriz esparsa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o permite inserir uma nova c\'E9lula com valor diferente de zero em uma matriz esparsa, levando em conta sua organiza\'E7\'E3o em listas duplamente encadeadas na horizontal e vertical. Qualquer valor igual a zero \'E9 ignorado, pois n\'E3o se armazena valores nulos na estrutura. Caso a posi\'E7\'E3o informada n\'E3o seja v\'E1lida, uma exce\'E7\'E3o de argumento inv\'E1lido \'E9 lan\'E7ada.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posI} \cell }{\'CDndice da linha na qual a c\'E9lula ser\'E1 inserida. Deve ser um valor positivo e menor ou igual ao n\'FAmero total de linhas da matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i posJ} \cell }{\'CDndice da coluna na qual a c\'E9lula ser\'E1 inserida. Deve ser um valor positivo e menor ou igual ao n\'FAmero total de colunas da matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i value} \cell }{Valor a ser armazenado na nova c\'E9lula. Valores iguais a zero n\'E3o s\'E3o inseridos na matriz.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Lan\'E7ada quando (posI, posJ) excede os limites de linhas ou colunas definidos para a matriz.\cell }
{\row }
}
A fun\'E7\'E3o percorre primeiro a lista horizontal (linha) correspondente para localizar a posi\'E7\'E3o adequada. Caso j\'E1 exista um n\'F3 na mesma coluna, o valor \'E9 atualizado. Se n\'E3o existir, cria-se um novo n\'F3 para armazenar o valor na posi\'E7\'E3o indicada. Ap\'F3s isso, a fun\'E7\'E3o tamb\'E9m atualiza a refer\'EAncia vertical (coluna), posicionando o novo n\'F3 de forma adequada na estrutura de dados. \par
}{
Defini\'E7\'E3o na linha {\b 153} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00154 \{\par
00155     {\cf19 if} (value == 0)\par
00156         {\cf19 return};\par
00157 \par
00158     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00159         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de inser\'E7\'E3o inv\'E1lido"});\par
00160 \par
00161     Node *linhaAtual = cabecalho;\par
00162     {\cf19 while} (linhaAtual->linha < posI)\par
00163     \{\par
00164         linhaAtual = linhaAtual->abaixo;\par
00165     \}\par
00166 \par
00167     Node *aux = linhaAtual;\par
00168     {\cf19 while} (aux->direita != linhaAtual && aux->direita->coluna < posJ)\par
00169     \{\par
00170         aux = aux->direita;\par
00171     \}\par
00172 \par
00173     {\cf19 if} (aux->direita->coluna == posJ)\par
00174     \{\par
00175         aux->direita->atualizaValor(value); \par
00176         {\cf19 return};\par
00177     \}\par
00178 \par
00179     Node *novo = {\cf17 new} Node(posI, posJ, value);\par
00180 \par
00181     novo->direita = aux->direita;\par
00182     aux->direita = novo;\par
00183 \par
00184     Node *colunaAtual = cabecalho;\par
00185     {\cf19 while} (colunaAtual->coluna < posJ)\par
00186     \{\par
00187         colunaAtual = colunaAtual->direita;\par
00188     \}\par
00189 \par
00190     aux = colunaAtual;\par
00191     {\cf19 while} (aux->abaixo != colunaAtual && aux->abaixo->linha < posI)\par
00192     \{\par
00193         aux = aux->abaixo;\par
00194     \}\par
00195 \par
00196     novo->abaixo = aux->abaixo;\par
00197     aux->abaixo = novo;\par
00198 \}\par
}
}
{\xe \v limpar\:Matriz}
{\xe \v Matriz\:limpar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} Matriz::limpar ()}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Limpa os dados armazenados na matriz esparsa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o remove todos os n\'F3s de dados presentes na matriz esparsa, liberando a mem\'F3ria alocada para estes n\'F3s.\par
Procedimento:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Verifica se o n\'F3 cabe\'E7alho da matriz \'E9 nulo. Se for, a fun\'E7\'E3o retorna imediatamente, pois n\'E3o h\'E1 estrutura alocada para ser limpa.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
2.\tab Obt\'E9m o primeiro sentinela de linha a partir do cabe\'E7alho (cabecalho->abaixo). Caso esse sentinela seja o pr\'F3prio cabe\'E7alho, a matriz est\'E1 vazia, e a fun\'E7\'E3o retorna sem realizar nenhuma a\'E7\'E3o.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
3.\tab Quebra a circularidade vertical:{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Percorre a lista de sentinelas de linha at\'E9 encontrar a \'FAltima linha (um n\'F3 cujo ponteiro "abaixo" aponta para o cabe\'E7alho).\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ajusta o ponteiro "abaixo" do \'FAltimo n\'F3 para nullptr, transformando a lista circular em uma lista linear, o que facilita a itera\'E7\'E3o e remo\'E7\'E3o dos n\'F3s.\par}
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
4.\tab Para cada linha (sentinela) na lista linear:{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Percorre a lista horizontal de n\'F3s de dados. Essa lista \'E9 circular, com os dados localizados entre o ponteiro "direita" do sentinela e o pr\'F3prio sentinela.\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Exclui cada n\'F3 de dado da linha, armazenando o n\'F3 seguinte antes de chamar delete, de forma a n\'E3o perder a refer\'EAncia.\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ap\'F3s excluir os n\'F3s de dados, restaura o ponteiro "direita" do sentinela para que ele aponte para ele mesmo.\par}
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
5.\tab Restaura a circularidade vertical:{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ap\'F3s a limpeza, percorre novamente a lista linear de linhas at\'E9 o \'FAltimo n\'F3.\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Reconfigura o ponteiro "abaixo" do \'FAltimo n\'F3 para apontar novamente ao cabe\'E7alho da matriz.\par}
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A fun\'E7\'E3o somente remove os n\'F3s de dados e restaura os ponteiros dos sentinelas, mantendo o n\'F3 cabe\'E7alho intacto.\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A estrutura original da matriz esparsa \'E9 preservada, permitindo que a mesma seja reutilizada posteriormente. \par}
}}}{
Defini\'E7\'E3o na linha {\b 115} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00116 \{\par
00117     {\cf19 if} (cabecalho == {\cf17 nullptr})\par
00118         {\cf19 return};\par
00119 \par
00120     Node *LinhaAtual = cabecalho->abaixo;\par
00121     {\cf19 if} (LinhaAtual == cabecalho)\par
00122         {\cf19 return};\par
00123 \par
00124     Node *ColunaAtual = LinhaAtual;\par
00125     {\cf19 while} (ColunaAtual->abaixo != cabecalho)\par
00126     \{\par
00127         ColunaAtual = ColunaAtual->abaixo;\par
00128     \}\par
00129     \par
00130     ColunaAtual->abaixo = {\cf17 nullptr};\par
00131 \par
00132     {\cf19 for} (Node *linha = LinhaAtual; linha != {\cf17 nullptr}; linha = linha->abaixo)\par
00133     \{\par
00134 \par
00135         Node *atual = linha->direita;\par
00136         {\cf19 while} (atual != linha)\par
00137         \{\par
00138             Node *proximo = atual->direita; \par
00139             {\cf17 delete} atual;                   \par
00140             atual = proximo;\par
00141         \}\par
00142         linha->direita = linha;\par
00143     \}\par
00144 \par
00145     ColunaAtual = LinhaAtual;\par
00146     {\cf19 while} (ColunaAtual->abaixo != {\cf17 nullptr})\par
00147     \{\par
00148         ColunaAtual = ColunaAtual->abaixo;\par
00149     \}\par
00150     ColunaAtual->abaixo = cabecalho;\par
00151 \}\par
}
}
{\xe \v operator=\:Matriz}
{\xe \v Matriz\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Matriz} Matriz::operator= ({\b Matriz}  {\i matriz})}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Sobrecarga do operador de atribui\'E7\'E3o para a classe {\b Matriz}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o utiliza a t\'E9cnica de c\'F3pia e troca (copy-and-swap) para implementar o operador de atribui\'E7\'E3o de forma segura e eficiente. Ao receber o objeto 'matriz' por valor, ele garante que todos os recursos sejam copiados e que, em seguida, uma troca (std::swap) seja realizada entre os atributos do objeto atual e os do objeto recebido. Assim, os dados antigos do objeto atual ser\'E3o automaticamente liberados quando o objeto 'matriz' passado por valor for destru\'EDdo, proporcionando uma forte garantia de exce\'E7\'E3o.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matriz} \cell }{Objeto do tipo {\b Matriz} que cont\'E9m os novos dados a serem atribu\'EDdos. Por ser passado por valor, uma c\'F3pia dos dados \'E9 criada, permitindo que a opera\'E7\'E3o de troca seja efetuada sem riscos de perda de recursos em caso de erros.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna o pr\'F3prio objeto (*this) j\'E1 contendo os dados do objeto 'matriz'. O retorno por valor, nesse contexto, assegura que o objeto resultante possui os recursos de forma consistente.\par
}}{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::swap: S\'E3o trocados os atributos 'cabecalho', 'linhas' e 'colunas' entre o objeto atual e o objeto recebido, o que permite que o estado do objeto atual seja atualizado com o novo conte\'FAdo.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ao final da fun\'E7\'E3o, o objeto local 'matriz' \'E9 destru\'EDdo, liberando os recursos que anteriormente pertenciam ao objeto atual, evitando assim poss\'EDveis vazamentos de mem\'F3ria. \par}
}{
Defini\'E7\'E3o na linha {\b 68} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00069 \{\par
00070     {\cf20 // Troca os dados do objeto atual com os dados de 'matriz'}\par
00071     std::swap(cabecalho, matriz.cabecalho);\par
00072     std::swap(linhas, matriz.linhas);\par
00073     std::swap(colunas, matriz.colunas);\par
00074     {\cf20 // 'matriz' \'E9 destru\'EDda, liberando os recursos antigos}\par
00075     {\cf19 return} *{\cf17 this};\par
00076 \}\par
}
}
{\xe \v print\:Matriz}
{\xe \v Matriz\:print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} Matriz::print ()}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Imprime a matriz no console. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe todas as linhas e colunas da matriz, mostrando os valores armazenados. Para posi\'E7\'F5es onde n\'E3o h\'E1 valor armazenado (na forma esparsa), \'E9 imprimido o n\'FAmero 0. \par
}{
Defini\'E7\'E3o na linha {\b 242} do arquivo {\b Matriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00243 \{\par
00244     IteratorM it = begin();\par
00245 \par
00246     {\cf19 for} ({\cf18 int} i = 1; i <= linhas; i++)\par
00247     \{\par
00248         {\cf19 for} ({\cf18 int} j = 1; j <= colunas; j++)\par
00249         \{\par
00250             {\cf19 if} (it.current->linha == i && it.current->coluna == j)\par
00251             \{\par
00252                 std::cout << std::fixed << std::setprecision(1) << *it;\par
00253                 ++it;\par
00254             \}\par
00255             {\cf19 else}\par
00256             \{\par
00257                 std::cout << {\cf22 "0.0"};\par
00258             \}\par
00259             std::cout << {\cf22 " "};\par
00260         \}\par
00261         std::cout << std::endl;\par
00262     \}\par
00263 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/matriz/{\b Matriz.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/matriz/{\b Matriz.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura Node\par \pard\plain 
{\tc\tcl2 \v Node}
{\xe \v Node}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um n\'F3 em uma matriz esparsa. }}\par
{
{\f2 #include <Node.hpp>}}\par
Diagrama de colabora\'E7\'E3o para Node:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structNode__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Node} ({\b const} {\b int} &{\b linha}, {\b const} {\b int} &{\b coluna}, {\b const} {\b double} &{\b valor})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Node}. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b atualizaValor} ({\b const} {\b double} &{\b novoValor})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o valor do n\'F3. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Node} * {\b direita}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Node} * {\b abaixo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b linha}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b coluna}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b double} {\b valor}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um n\'F3 em uma matriz esparsa. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta struct \'E9 usada para representar um n\'F3 em uma matriz esparsa, que cont\'E9m ponteiros para os n\'F3s \'E0 direita e abaixo, bem como a linha, coluna e valor do elemento. \par
}{
Defini\'E7\'E3o na linha {\b 11} do arquivo {\b Node.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Node\:Node}
{\xe \v Node\:Node}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Node::Node ({\b const} {\b int} &  {\i linha}, {\b const} {\b int} &  {\i coluna}, {\b const} {\b double} &  {\i valor}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Construtor da classe {\b Node}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este construtor inicializa um objeto {\b Node} com os valores fornecidos para linha, coluna e valor.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i linha} \cell }{Refer\'EAncia constante para o n\'FAmero da linha. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i coluna} \cell }{Refer\'EAncia constante para o n\'FAmero da coluna. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i valor} \cell }{Refer\'EAncia constante para o valor armazenado no n\'F3. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 28} do arquivo {\b Node.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00028                                                                    : linha(linha), coluna(coluna), valor(valor)\par
00029     \{\par
00030         direita = {\cf17 nullptr};\par
00031         abaixo = {\cf17 nullptr};\par
00032     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v atualizaValor\:Node}
{\xe \v Node\:atualizaValor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} Node::atualizaValor ({\b const} {\b double} &  {\i novoValor}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Atualiza o valor do n\'F3. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o atualiza o valor armazenado no n\'F3 com um novo valor fornecido.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i novoValor} \cell }{O novo valor que substituir\'E1 o valor atual do n\'F3. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 41} do arquivo {\b Node.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00042     \{\par
00043         valor = novoValor;\par
00044     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v abaixo\:Node}
{\xe \v Node\:abaixo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Node}* Node::abaixo}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ponteiro para o pr\'F3ximo n\'F3 na mesma coluna. \par
}{
Defini\'E7\'E3o na linha {\b 14} do arquivo {\b Node.hpp}.}\par
}
{\xe \v coluna\:Node}
{\xe \v Node\:coluna}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} Node::coluna}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
N\'FAmero da coluna onde o n\'F3 est\'E1 localizado. \par
}{
Defini\'E7\'E3o na linha {\b 16} do arquivo {\b Node.hpp}.}\par
}
{\xe \v direita\:Node}
{\xe \v Node\:direita}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Node}* Node::direita}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Ponteiro para o pr\'F3ximo n\'F3 na mesma linha. \par
}{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b Node.hpp}.}\par
}
{\xe \v linha\:Node}
{\xe \v Node\:linha}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} Node::linha}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
N\'FAmero da linha onde o n\'F3 est\'E1 localizado. \par
}{
Defini\'E7\'E3o na linha {\b 15} do arquivo {\b Node.hpp}.}\par
}
{\xe \v valor\:Node}
{\xe \v Node\:valor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b double} Node::valor}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Valor armazenado no n\'F3. \par
}{
Defini\'E7\'E3o na linha {\b 17} do arquivo {\b Node.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
include/node/{\b Node.hpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Arquivos{\tc \v Arquivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo include/IteratorM/IteratorM.hpp\par \pard\plain 
{\tc\tcl2 \v include/IteratorM/IteratorM.hpp}
{\xe \v include/IteratorM/IteratorM.hpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "matriz/Matriz.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para IteratorM.hpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "IteratorM_8hpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Este grafo mostra quais arquivos est\'E3o direta ou indiretamente relacionados com esse arquivo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "IteratorM_8hpp__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b IteratorM}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Iterador para percorrer uma matriz esparsa. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IteratorM.hpp\par \pard\plain 
{\tc\tcl2 \v include/IteratorM/IteratorM.hpp}
{\xe \v include/IteratorM/IteratorM.hpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef ITERATORM_HPP}\par
00002 {\cf21 #define ITERATORM_HPP}\par
00003 \par
00004 {\cf21 #include "matriz/Matriz.hpp"}\par
00005 \par
00006 {\cf17 class }Matriz;\par
00007 \par
00016 {\cf17 class }IteratorM\par
00017 \{\par
00018     {\cf17 friend} {\cf17 class }Matriz;\par
00019 \par
00020 {\cf17 private}:\par
00021     Node *cabecalho; \par
00022     Node *current;   \par
00024 {\cf17 public}:\par
00025     {\cf17 using }iterator_category = std::forward_iterator_tag;\par
00026     {\cf17 using }difference_type = std::ptrdiff_t;\par
00027     {\cf17 using }value_type = double;\par
00028     {\cf17 using }pointer = {\cf18 double} *;\par
00029     {\cf17 using }reference = {\cf18 double} &;\par
00030 \par
00036     IteratorM() : cabecalho(nullptr), current(nullptr) \{\}\par
00037 \par
00046     IteratorM(Node *cabecalho, Node *current) : cabecalho(cabecalho), current(current)\par
00047     \{\par
00048         {\cf19 while} (current == cabecalho)\par
00049         \{\par
00050             cabecalho = cabecalho->abaixo;\par
00051             current = current->abaixo->direita;\par
00052         \}\par
00053     \}\par
00054 \par
00062     reference operator*()\par
00063     \{\par
00064         {\cf19 return} current->valor;\par
00065     \}\par
00066 \par
00074     reference operator*(){\cf17  const}\par
00075 {\cf17     }\{\par
00076         {\cf19 return} current->valor;\par
00077     \}\par
00078 \par
00086     pointer operator->()\par
00087     \{\par
00088         {\cf19 return} &current->valor;\par
00089     \}\par
00090 \par
00098     pointer operator->(){\cf17  const}\par
00099 {\cf17     }\{\par
00100         {\cf19 return} &current->valor;\par
00101     \}\par
00102 \par
00110     IteratorM &operator++()\par
00111     \{\par
00112         current = current->direita;\par
00113 \par
00114         {\cf19 while} (current == cabecalho)\par
00115         \{\par
00116             cabecalho = cabecalho->abaixo;\par
00117             current = current->abaixo->direita;\par
00118         \}\par
00119 \par
00120         {\cf19 return} *{\cf17 this};\par
00121     \}\par
00122 \par
00131     {\cf18 bool} operator==({\cf17 const} IteratorM &it){\cf17  const}\par
00132 {\cf17     }\{\par
00133         {\cf19 return} cabecalho == it.cabecalho && current == it.current;\par
00134     \}\par
00135 \par
00144     {\cf18 bool} operator!=({\cf17 const} IteratorM &it){\cf17  const}\par
00145 {\cf17     }\{\par
00146         {\cf19 return} cabecalho != it.cabecalho || current != it.current;\par
00147     \}\par
00148 \};\par
00149 \par
00150 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo include/manipMatriz/manipMatriz.hpp\par \pard\plain 
{\tc\tcl2 \v include/manipMatriz/manipMatriz.hpp}
{\xe \v include/manipMatriz/manipMatriz.hpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Menu para as fun\'E7\'F5es para manipula\'E7\'E3o de matrizes. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "matriz/Matriz.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para manipMatriz.hpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "manipMatriz_8hpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Este grafo mostra quais arquivos est\'E3o direta ou indiretamente relacionados com esse arquivo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "manipMatriz_8hpp__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b manipMatrix} ({\b Matriz} &{\b matriz}, {\b const} {\b std::string} &{\b nomeMatriz})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Menu para as fun\'E7\'F5es para manipula\'E7\'E3o de matrizes. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matriz} \cell }{{\b Matriz} a ser manipulada \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nomeMatriz} \cell }{Nome da matriz a ser manipulada \cell }
{\row }
}
}{
Defini\'E7\'E3o no arquivo {\b manipMatriz.hpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v manipMatrix\:manipMatriz.hpp}
{\xe \v manipMatriz.hpp\:manipMatrix}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} manipMatrix ({\b Matriz} &  {\i matriz}, {\b const} {\b std::string} &  {\i nomeMatriz})}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b manipMatriz.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00014 \{\par
00015     {\cf19 while} ({\cf17 true})\par
00016     \{\par
00017         std::cout << {\cf22 "Matriz selecionada: "} << nomeMatriz << std::endl;\par
00018         matriz.print();\par
00019         std::cout << {\cf22 "Escolha uma op\'E7\'E3o:"} << std::endl;\par
00020         std::cout << {\cf22 "[1] - Inserir Valor"} << std::endl;\par
00021         std::cout << {\cf22 "[2] - Limpar Matriz"} << std::endl;\par
00022         std::cout << {\cf22 "[3] - Voltar"} << std::endl;\par
00023 \par
00024         {\cf18 int} opcao;\par
00025         std::cin >> opcao;\par
00026         std::cin.ignore();\par
00027 \par
00028         {\cf19 switch} (opcao)\par
00029         \{\par
00030         {\cf19 case} 1:\par
00031         \{\par
00032             {\cf18 int} i, j;\par
00033             {\cf18 double} valor;\par
00034 \par
00035             std::cout << {\cf22 "Digite a linha: "};\par
00036             std::cin >> i;\par
00037             std::cin.ignore();\par
00038 \par
00039             std::cout << {\cf22 "Digite a coluna: "};\par
00040             std::cin >> j;\par
00041             std::cin.ignore();\par
00042 \par
00043             std::cout << {\cf22 "Digite o valor: "};\par
00044             std::cin >> valor;\par
00045             std::cin.ignore();\par
00046 \par
00047             {\cf19 try}\par
00048             \{\par
00049                 matriz.insert(i, j, valor);\par
00050             \}\par
00051             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00052             \{\par
00053                 std::cerr << e.what() << {\cf23 '\\n'};\par
00054             \}\par
00055             {\cf19 break};\par
00056         \}\par
00057 \par
00058         {\cf19 case} 2:\par
00059         \{\par
00060             std::cout << {\cf22 "Tem certeza que deseja limpar a matriz? [s/n]"} << std::endl;\par
00061             {\cf18 char} confirmacao;\par
00062             std::cin >> confirmacao;\par
00063 \par
00064             {\cf19 switch} (confirmacao)\par
00065             \{\par
00066             {\cf19 case} {\cf23 's'}:\par
00067             {\cf19 case} {\cf23 'S'}:\par
00068                 matriz.limpar();\par
00069                 std::cout << {\cf22 "Matriz limpa"} << std::endl;\par
00070                 {\cf19 break};\par
00071 \par
00072             {\cf19 case} {\cf23 'n'}:\par
00073             {\cf19 case} {\cf23 'N'}:\par
00074                 std::cout << {\cf22 "Opera\'E7\'E3o cancelada"} << std::endl;\par
00075                 {\cf19 break};\par
00076             \}\par
00077             {\cf19 break};\par
00078         \}\par
00079 \par
00080         {\cf19 case} 3:\par
00081         \{\par
00082             std::cout << {\cf22 "Voltando..."} << std::endl;\par
00083             {\cf19 return};\par
00084         \}\par
00085 \par
00086         {\cf19 default}:\par
00087         \{\par
00088             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00089             {\cf19 break};\par
00090         \}\par
00091         \}\par
00092     \}\par
00093 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
manipMatriz.hpp\par \pard\plain 
{\tc\tcl2 \v include/manipMatriz/manipMatriz.hpp}
{\xe \v include/manipMatriz/manipMatriz.hpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include "matriz/Matriz.hpp"}\par
00004 \par
00013 {\cf18 void} manipMatrix(Matriz &matriz, {\cf17 const} std::string &nomeMatriz)\par
00014 \{\par
00015     {\cf19 while} ({\cf17 true})\par
00016     \{\par
00017         std::cout << {\cf22 "Matriz selecionada: "} << nomeMatriz << std::endl;\par
00018         matriz.print();\par
00019         std::cout << {\cf22 "Escolha uma op\'E7\'E3o:"} << std::endl;\par
00020         std::cout << {\cf22 "[1] - Inserir Valor"} << std::endl;\par
00021         std::cout << {\cf22 "[2] - Limpar Matriz"} << std::endl;\par
00022         std::cout << {\cf22 "[3] - Voltar"} << std::endl;\par
00023 \par
00024         {\cf18 int} opcao;\par
00025         std::cin >> opcao;\par
00026         std::cin.ignore();\par
00027 \par
00028         {\cf19 switch} (opcao)\par
00029         \{\par
00030         {\cf19 case} 1:\par
00031         \{\par
00032             {\cf18 int} i, j;\par
00033             {\cf18 double} valor;\par
00034 \par
00035             std::cout << {\cf22 "Digite a linha: "};\par
00036             std::cin >> i;\par
00037             std::cin.ignore();\par
00038 \par
00039             std::cout << {\cf22 "Digite a coluna: "};\par
00040             std::cin >> j;\par
00041             std::cin.ignore();\par
00042 \par
00043             std::cout << {\cf22 "Digite o valor: "};\par
00044             std::cin >> valor;\par
00045             std::cin.ignore();\par
00046 \par
00047             {\cf19 try}\par
00048             \{\par
00049                 matriz.insert(i, j, valor);\par
00050             \}\par
00051             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00052             \{\par
00053                 std::cerr << e.what() << {\cf23 '\\n'};\par
00054             \}\par
00055             {\cf19 break};\par
00056         \}\par
00057 \par
00058         {\cf19 case} 2:\par
00059         \{\par
00060             std::cout << {\cf22 "Tem certeza que deseja limpar a matriz? [s/n]"} << std::endl;\par
00061             {\cf18 char} confirmacao;\par
00062             std::cin >> confirmacao;\par
00063 \par
00064             {\cf19 switch} (confirmacao)\par
00065             \{\par
00066             {\cf19 case} {\cf23 's'}:\par
00067             {\cf19 case} {\cf23 'S'}:\par
00068                 matriz.limpar();\par
00069                 std::cout << {\cf22 "Matriz limpa"} << std::endl;\par
00070                 {\cf19 break};\par
00071 \par
00072             {\cf19 case} {\cf23 'n'}:\par
00073             {\cf19 case} {\cf23 'N'}:\par
00074                 std::cout << {\cf22 "Opera\'E7\'E3o cancelada"} << std::endl;\par
00075                 {\cf19 break};\par
00076             \}\par
00077             {\cf19 break};\par
00078         \}\par
00079 \par
00080         {\cf19 case} 3:\par
00081         \{\par
00082             std::cout << {\cf22 "Voltando..."} << std::endl;\par
00083             {\cf19 return};\par
00084         \}\par
00085 \par
00086         {\cf19 default}:\par
00087         \{\par
00088             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00089             {\cf19 break};\par
00090         \}\par
00091         \}\par
00092     \}\par
00093 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo include/matriz/Matriz.hpp\par \pard\plain 
{\tc\tcl2 \v include/matriz/Matriz.hpp}
{\xe \v include/matriz/Matriz.hpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include "node/Node.hpp"}\par
{\f2 #include "IteratorM/IteratorM.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para Matriz.hpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matriz_8hpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Este grafo mostra quais arquivos est\'E3o direta ou indiretamente relacionados com esse arquivo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matriz_8hpp__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Matriz}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Classe que representa uma matriz esparsa. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matriz.hpp\par \pard\plain 
{\tc\tcl2 \v include/matriz/Matriz.hpp}
{\xe \v include/matriz/Matriz.hpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef MATRIZ_HPP}\par
00002 {\cf21 #define MATRIZ_HPP}\par
00003 \par
00004 {\cf21 #include <iostream>}\par
00005 {\cf21 #include "node/Node.hpp"}\par
00006 {\cf21 #include "IteratorM/IteratorM.hpp"}\par
00007 \par
00032 {\cf17 class }Matriz\par
00033 \{\par
00034 {\cf17 private}:\par
00035     Node *cabecalho; \par
00036     {\cf18 int} linhas;      \par
00037     {\cf18 int} colunas;     \par
00039 {\cf17 public}:\par
00050     Matriz();\par
00051 \par
00077     Matriz({\cf17 const} {\cf18 int} &ln, {\cf17 const} {\cf18 int} &cl);\par
00078 \par
00092     Matriz({\cf17 const} Matriz &outra);\par
00093 \par
00117     ~Matriz();\par
00118 \par
00133     IteratorM begin();\par
00134 \par
00144     IteratorM end();\par
00145 \par
00156     IteratorM begin() {\cf17 const};\par
00157 \par
00167     IteratorM end() {\cf17 const};\par
00168 \par
00190     Matriz operator=(Matriz matriz);\par
00191 \par
00200     {\cf18 int} getLinhas() {\cf17 const};\par
00201 \par
00210     {\cf18 int} getColunas() {\cf17 const};\par
00211 \par
00240     {\cf18 void} limpar();\par
00241 \par
00272     {\cf18 void} insert({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ, {\cf17 const} {\cf18 double} &value);\par
00273 \par
00292     {\cf18 double} get({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ);\par
00293 \par
00313     {\cf18 double} get({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ) {\cf17 const};\par
00314 \par
00322     {\cf18 void} print();\par
00323 \};\par
00324 \par
00325 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo include/node/Node.hpp\par \pard\plain 
{\tc\tcl2 \v include/node/Node.hpp}
{\xe \v include/node/Node.hpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Este grafo mostra quais arquivos est\'E3o direta ou indiretamente relacionados com esse arquivo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Node_8hpp__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Node}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Representa um n\'F3 em uma matriz esparsa. }}\par}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Node.hpp\par \pard\plain 
{\tc\tcl2 \v include/node/Node.hpp}
{\xe \v include/node/Node.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef NODE_HPP}\par
00002 {\cf21 #define NODE_HPP}\par
00003 \par
00011 {\cf17 struct }Node\par
00012 \{\par
00013     Node *direita; \par
00014     Node *abaixo;  \par
00015     {\cf18 int} linha;     \par
00016     {\cf18 int} coluna;    \par
00017     {\cf18 double} valor;  \par
00028     Node({\cf17 const} {\cf18 int} &linha, {\cf17 const} {\cf18 int} &coluna, {\cf17 const} {\cf18 double} &valor) : linha(linha), coluna(coluna), valor(valor)\par
00029     \{\par
00030         direita = {\cf17 nullptr};\par
00031         abaixo = {\cf17 nullptr};\par
00032     \}\par
00033 \par
00041     {\cf18 void} atualizaValor({\cf17 const} {\cf18 double} &novoValor)\par
00042     \{\par
00043         valor = novoValor;\par
00044     \}\par
00045 \};\par
00046 \par
00047 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo include/utils/utils.hpp\par \pard\plain 
{\tc\tcl2 \v include/utils/utils.hpp}
{\xe \v include/utils/utils.hpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "matriz/Matriz.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para utils.hpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "utils_8hpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Este grafo mostra quais arquivos est\'E3o direta ou indiretamente relacionados com esse arquivo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "utils_8hpp__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} {\b sum} ({\b const} {\b Matriz} &{\b matrixA}, {\b const} {\b Matriz} &{\b matrizB})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Soma duas matrizes de mesmo tamanho. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} {\b multiply} ({\b const} {\b Matriz} &{\b matrizA}, {\b const} {\b Matriz} &{\b matrizB})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplica duas matrizes e retorna a matriz resultante. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v multiply\:utils.hpp}
{\xe \v utils.hpp\:multiply}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Matriz} multiply ({\b const} {\b Matriz} &  {\i matrizA}, {\b const} {\b Matriz} &  {\i matrizB})}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Multiplica duas matrizes e retorna a matriz resultante. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o realiza a multiplica\'E7\'E3o de duas matrizes, matrizA e matrizB, e retorna a matriz resultante. A multiplica\'E7\'E3o de matrizes \'E9 poss\'EDvel apenas se o n\'FAmero de colunas de matrizA for igual ao n\'FAmero de linhas de matrizB. Caso contr\'E1rio, uma exce\'E7\'E3o std::invalid_argument ser\'E1 lan\'E7ada.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizA} \cell }{A primeira matriz a ser multiplicada. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizB} \cell }{A segunda matriz a ser multiplicada. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b Matriz} A matriz resultante da multiplica\'E7\'E3o de matrizA e matrizB. \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Se o n\'FAmero de colunas de matrizA for diferente do n\'FAmero de linhas de matrizB.\cell }
{\row }
}
A multiplica\'E7\'E3o de matrizes \'E9 realizada da seguinte forma:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Para cada linha i de matrizA e cada coluna j de matrizB, calcula-se o produto escalar entre a linha i de matrizA e a coluna j de matrizB.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O valor resultante \'E9 inserido na posi\'E7\'E3o (i, j) da matriz resultante. \par}
}{
Defini\'E7\'E3o na linha {\b 60} do arquivo {\b utils.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00061 \{\par
00062     {\cf20 // Verifica\'E7\'E3o se a multiplica\'E7\'E3o \'E9 poss\'EDvel}\par
00063     {\cf19 if} (matrizA.getColunas() != matrizB.getLinhas())\par
00064     \{\par
00065         {\cf19 throw} std::invalid_argument({\cf22 "Erro: A matriz A precisa possui o n\'FAmero de colunas iguais ao n\'FAmero de linhas"});\par
00066     \}\par
00067 \par
00068     {\cf20 // Criando a matriz resultante (C)}\par
00069     Matriz matriz(matrizA.getLinhas(), matrizB.getColunas());\par
00070 \par
00071     {\cf20 // Percorrendo as linhas de matrizA e as colunas de matrizB}\par
00072     {\cf19 for} ({\cf18 int} i = 1, linha = matrizA.getLinhas(); i <= linha; i++)\par
00073     \{\par
00074         {\cf19 for} ({\cf18 int} j = 1, coluna = matrizB.getColunas(); j <= coluna; j++)\par
00075         \{\par
00076             {\cf18 double} valor = 0;\par
00077 \par
00078             {\cf20 // Calculando o produto escalar entre a linha i de A e a coluna j de B}\par
00079             {\cf19 for} ({\cf18 int} k = 1; k <= matrizA.getColunas(); k++)\par
00080             \{\par
00081                 valor += matrizA.get(i, k) * matrizB.get(k, j);\par
00082             \}\par
00083 \par
00084             matriz.insert(i, j, valor);\par
00085         \}\par
00086     \}\par
00087 \par
00088     {\cf19 return} matriz; {\cf20 // Retorna a matriz resultante}\par
00089 \}\par
}
}
{\xe \v sum\:utils.hpp}
{\xe \v utils.hpp\:sum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Matriz} sum ({\b const} {\b Matriz} &  {\i matrixA}, {\b const} {\b Matriz} &  {\i matrizB})}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Soma duas matrizes de mesmo tamanho. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o realiza a soma elemento a elemento das matrizes passadas por par\'E2metro, retornando uma nova matriz com o resultado.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrixA} \cell }{Primeira matriz de entrada, cujas dimens\'F5es (linhas e colunas) devem ser iguais \'E0s de {\f2 matrizB} . \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizB} \cell }{Segunda matriz de entrada, com dimens\'F5es compat\'EDveis com {\f2 matrixA} , para que a soma seja realizada corretamente.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::invalid_argument} \cell }{Exce\'E7\'E3o lan\'E7ada caso as matrizes fornecidas n\'E3o possuam as mesmas dimens\'F5es, impossibilitando a opera\'E7\'E3o de soma.\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Uma nova matriz que representa o resultado da soma elemento a elemento de {\f2 matrixA}  e {\f2 matrizB} , mantendo as mesmas dimens\'F5es das matrizes de entrada. \par
}}}{
Defini\'E7\'E3o na linha {\b 23} do arquivo {\b utils.hpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00024 \{\par
00025     {\cf19 if} (matrixA.getLinhas() != matrizB.getLinhas() || matrixA.getColunas() != matrizB.getColunas())\par
00026         {\cf19 throw} std::invalid_argument({\cf22 "Erro: As matrizes n\'E3o possuem o mesmo tamanho"});\par
00027 \par
00028     Matriz matriz(matrixA.getLinhas(), matrixA.getColunas());\par
00029 \par
00030     {\cf19 for} ({\cf18 int} i = 1, linha = matrixA.getLinhas(); i <= linha; i++)\par
00031     \{\par
00032         {\cf19 for} ({\cf18 int} j = 1, coluna = matrixA.getColunas(); j <= coluna; j++)\par
00033         \{\par
00034             {\cf18 double} valor = matrixA.get(i, j) + matrizB.get(i, j);\par
00035 \par
00036             matriz.insert(i, j, valor);\par
00037         \}\par
00038     \}\par
00039 \par
00040     {\cf19 return} matriz;\par
00041 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
utils.hpp\par \pard\plain 
{\tc\tcl2 \v include/utils/utils.hpp}
{\xe \v include/utils/utils.hpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifndef UTILS_HPP}\par
00002 {\cf21 #define UTILS_HPP}\par
00003 \par
00004 {\cf21 #include "matriz/Matriz.hpp"}\par
00005 \par
00023 Matriz sum({\cf17 const} Matriz &matrixA, {\cf17 const} Matriz &matrizB)\par
00024 \{\par
00025     {\cf19 if} (matrixA.getLinhas() != matrizB.getLinhas() || matrixA.getColunas() != matrizB.getColunas())\par
00026         {\cf19 throw} std::invalid_argument({\cf22 "Erro: As matrizes n\'E3o possuem o mesmo tamanho"});\par
00027 \par
00028     Matriz matriz(matrixA.getLinhas(), matrixA.getColunas());\par
00029 \par
00030     {\cf19 for} ({\cf18 int} i = 1, linha = matrixA.getLinhas(); i <= linha; i++)\par
00031     \{\par
00032         {\cf19 for} ({\cf18 int} j = 1, coluna = matrixA.getColunas(); j <= coluna; j++)\par
00033         \{\par
00034             {\cf18 double} valor = matrixA.get(i, j) + matrizB.get(i, j);\par
00035 \par
00036             matriz.insert(i, j, valor);\par
00037         \}\par
00038     \}\par
00039 \par
00040     {\cf19 return} matriz;\par
00041 \}\par
00042 \par
00060 Matriz multiply({\cf17 const} Matriz &matrizA, {\cf17 const} Matriz &matrizB)\par
00061 \{\par
00062     {\cf20 // Verifica\'E7\'E3o se a multiplica\'E7\'E3o \'E9 poss\'EDvel}\par
00063     {\cf19 if} (matrizA.getColunas() != matrizB.getLinhas())\par
00064     \{\par
00065         {\cf19 throw} std::invalid_argument({\cf22 "Erro: A matriz A precisa possui o n\'FAmero de colunas iguais ao n\'FAmero de linhas"});\par
00066     \}\par
00067 \par
00068     {\cf20 // Criando a matriz resultante (C)}\par
00069     Matriz matriz(matrizA.getLinhas(), matrizB.getColunas());\par
00070 \par
00071     {\cf20 // Percorrendo as linhas de matrizA e as colunas de matrizB}\par
00072     {\cf19 for} ({\cf18 int} i = 1, linha = matrizA.getLinhas(); i <= linha; i++)\par
00073     \{\par
00074         {\cf19 for} ({\cf18 int} j = 1, coluna = matrizB.getColunas(); j <= coluna; j++)\par
00075         \{\par
00076             {\cf18 double} valor = 0;\par
00077 \par
00078             {\cf20 // Calculando o produto escalar entre a linha i de A e a coluna j de B}\par
00079             {\cf19 for} ({\cf18 int} k = 1; k <= matrizA.getColunas(); k++)\par
00080             \{\par
00081                 valor += matrizA.get(i, k) * matrizB.get(k, j);\par
00082             \}\par
00083 \par
00084             matriz.insert(i, j, valor);\par
00085         \}\par
00086     \}\par
00087 \par
00088     {\cf19 return} matriz; {\cf20 // Retorna a matriz resultante}\par
00089 \}\par
00090 \par
00091 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo README.md\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo src/main/main.cpp\par \pard\plain 
{\tc\tcl2 \v src/main/main.cpp}
{\xe \v src/main/main.cpp}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para manipula\'E7\'E3o de matrizes esparsas. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <fstream>}\par
{\f2 #include <unordered_map>}\par
{\f2 #include "matriz/Matriz.hpp"}\par
{\f2 #include "utils/utils.hpp"}\par
{\f2 #include "manipMatriz/manipMatriz.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para main.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es de Tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b string} = std::string\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b unordered_map} = std::unordered_map< {\b string}, {\b Matriz} >\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Opcoes} \{ {\b LER_MATRIZ} = 1
, {\b MANIPULAR_MATRIZ}
, {\b IMPRIMIR_MATRIZ}
, {\b SOMAR_MATRIZES}
, {\b MULTIPLICAR_MATRIZES}
, {\b SAIR}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b readMatrix} ({\b Matriz} &{\b matriz}, {\b const} {\b std::string} {\b filename})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados de um arquivo e insere em uma matriz esparsa. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b bool} {\b existeMatriz} ({\b const} {\b std::string} {\b filename}, {\b const} {\b unordered_map} &{\b matrizes})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se existe uma matriz previamente armazenada em um {\f2 unordered_map} . }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b salvarMatriz} ({\b const} {\b Matriz} &{\b matriz}, {\b unordered_map} &{\b matrizes})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Salva uma matriz em um mapa associativo de matrizes, permitindo que seja recuperada posteriormente. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b escolherMatrizes} ({\b string} &{\b filename}, {\b string} &{\b filename2})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solicita ao usu\'E1rio o nome de duas matrizes a serem processadas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b printMatrizes} ({\b const} {\b unordered_map} &{\b matrizes})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe informa\'E7\'F5es sobre as matrizes armazenadas em um std::unordered_map. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Programa para manipula\'E7\'E3o de matrizes esparsas. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este programa permite ao usu\'E1rio ler, imprimir, somar e multiplicar matrizes esparsas. As matrizes s\'E3o armazenadas em um mapa associativo, onde a chave \'E9 o nome do arquivo e o valor \'E9 a matriz correspondente.\par
O programa apresenta um menu interativo com as seguintes op\'E7\'F5es:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Ler {\b Matriz}: L\'EA uma matriz a partir de um arquivo.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Imprimir {\b Matriz}: Imprime uma matriz armazenada.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Somar Matrizes: Soma duas matrizes armazenadas.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Multiplicar Matrizes: Multiplica duas matrizes armazenadas.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Sair: Encerra o programa. \par}
\par
}{
Defini\'E7\'E3o no arquivo {\b main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es dos tipos\par
\pard\plain 
{\xe \v string\:main.cpp}
{\xe \v main.cpp\:string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b string} =  std::string}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Autores\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{
\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Antonio Willian Silva Oliveira - 567294 (\par
\pard\plain \s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Iago de Oliveira Lo - 565321 ( \par}
}}}{
Defini\'E7\'E3o na linha {\b 13} do arquivo {\b main.cpp}.}\par
}
{\xe \v unordered_map\:main.cpp}
{\xe \v main.cpp\:unordered_map}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b using} {\b unordered_map} =  std::unordered_map<{\b string}, {\b Matriz}>}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 14} do arquivo {\b main.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Opcoes\:main.cpp}
{\xe \v main.cpp\:Opcoes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b enum} {\b Opcoes}}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v LER_MATRIZ\:main.cpp}
{\xe \v main.cpp\:LER_MATRIZ}
{\qr LER_MATRIZ{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\cell }{\cell }{\row }
{\xe \v MANIPULAR_MATRIZ\:main.cpp}
{\xe \v main.cpp\:MANIPULAR_MATRIZ}
{\qr MANIPULAR_MATRIZ{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
\cell }{\cell }{\row }
{\xe \v IMPRIMIR_MATRIZ\:main.cpp}
{\xe \v main.cpp\:IMPRIMIR_MATRIZ}
{\qr IMPRIMIR_MATRIZ{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\cell }{\cell }{\row }
{\xe \v SOMAR_MATRIZES\:main.cpp}
{\xe \v main.cpp\:SOMAR_MATRIZES}
{\qr SOMAR_MATRIZES{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\cell }{\cell }{\row }
{\xe \v MULTIPLICAR_MATRIZES\:main.cpp}
{\xe \v main.cpp\:MULTIPLICAR_MATRIZES}
{\qr MULTIPLICAR_MATRIZES{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\cell }{\cell }{\row }
{\xe \v SAIR\:main.cpp}
{\xe \v main.cpp\:SAIR}
{\qr SAIR{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
\cell }{\cell }{\row }
}
\par
{
Defini\'E7\'E3o na linha {\b 16} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00017 \{\par
00018     LER_MATRIZ = 1,\par
00019     MANIPULAR_MATRIZ,\par
00020     IMPRIMIR_MATRIZ,\par
00021     SOMAR_MATRIZES,\par
00022     MULTIPLICAR_MATRIZES,\par
00023     SAIR\par
00024 \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v escolherMatrizes\:main.cpp}
{\xe \v main.cpp\:escolherMatrizes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} escolherMatrizes ({\b string} &  {\i filename}, {\b string} &  {\i filename2})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Solicita ao usu\'E1rio o nome de duas matrizes a serem processadas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{Refer\'EAncia para a string que armazenar\'E1 o nome da primeira matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename2} \cell }{Refer\'EAncia para a string que armazenar\'E1 o nome da segunda matriz. \cell }
{\row }
}
}{
Defini\'E7\'E3o na linha {\b 383} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00384 \{\par
00385     std::cout << {\cf22 "Coloque o nome da primeira matriz: "};\par
00386     std::getline(std::cin, filename);\par
00387 \par
00388     std::cout << {\cf22 "Coloque o nome da segunda matriz: "};\par
00389     std::getline(std::cin, filename2);\par
00390 \}\par
}
}
{\xe \v existeMatriz\:main.cpp}
{\xe \v main.cpp\:existeMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b bool} existeMatriz ({\b const} {\b std::string}  {\i filename}, {\b const} {\b unordered_map} &  {\i matrizes})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Verifica se existe uma matriz previamente armazenada em um {\f2 unordered_map} . }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o realiza uma busca no {\f2 unordered_map}  pelo nome do arquivo ({\f2 filename} ) para determinar se j\'E1 existe uma matriz associada a ele.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{O nome do arquivo cujo registro de matriz deve ser verificado. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizes} \cell }{O {\f2 unordered_map}  que mant\'E9m o mapeamento entre nomes de arquivos e matrizes. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Retorna {\f2 true}  se existir a matriz correspondente ao nome do arquivo; caso contr\'E1rio, {\f2 false} .\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
O uso do {\f2 unordered_map}  permite que a busca ocorra de maneira eficiente, pois a busca possui complexidade m\'E9dia {\b O(1)}. \par
}}}{
Defini\'E7\'E3o na linha {\b 338} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00339 \{\par
00340     {\cf19 return} matrizes.find(filename) != matrizes.end();\par
00341 \}\par
}
}
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} main ()}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 117} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00118 \{\par
00119     {\cf20 // Configura a localiza\'E7\'E3o para suportar caracteres especiais em portugu\'EAs}\par
00120     setlocale(LC_ALL, {\cf22 "pt_BR.UTF-8"});\par
00121 \par
00122     std::cout << {\cf22 "Bem-vindo ao programa de manipula\'E7\'E3o de matrizes esparsas"} << std::endl;\par
00123     std::cout << {\cf22 "-----------------------------------------------------------"} << std::endl;\par
00124 \par
00125     {\cf20 // Mapa associativo para armazenar as matrizes}\par
00126     unordered_map matrizes;\par
00127 \par
00128     {\cf19 while} ({\cf17 true})\par
00129     \{\par
00130         {\cf20 // Exibe o menu de op\'E7\'F5es}\par
00131         std::cout << {\cf22 "Escolha uma op\'E7\'E3o:"} << std::endl;\par
00132         std::cout << {\cf22 "[1] - Ler Matriz"} << std::endl;\par
00133         std::cout << {\cf22 "[2] - Manipular Matriz"} << std::endl;\par
00134         std::cout << {\cf22 "[3] - Imprimir Matriz"} << std::endl;\par
00135         std::cout << {\cf22 "[4] - Somar Matrizes"} << std::endl;\par
00136         std::cout << {\cf22 "[5] - Multiplicar Matrizes"} << std::endl;\par
00137         std::cout << {\cf22 "[6] - Sair"} << std::endl;\par
00138         {\cf18 int} opcao;\par
00139         std::cin >> opcao;\par
00140         std::cin.ignore();\par
00141 \par
00142         {\cf19 switch} (opcao)\par
00143         \{\par
00144         {\cf19 case} LER_MATRIZ:\par
00145         \{\par
00146             {\cf20 // L\'EA uma matriz a partir de um arquivo}\par
00147             {\cf18 string} filename;\par
00148             std::cout << {\cf22 "Digite o nome do arquivo: "};\par
00149             std::getline(std::cin, filename);\par
00150 \par
00151             Matriz matriz;\par
00152 \par
00153             {\cf19 try}\par
00154             \{\par
00155                 readMatrix(matriz, filename);\par
00156             \}\par
00157             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00158             \{\par
00159                 std::cerr << e.what() << {\cf23 '\\n'};\par
00160                 {\cf19 break};\par
00161             \}\par
00162 \par
00163             {\cf20 // Armazena a matriz no mapa associativo}\par
00164             matrizes.insert(std::make_pair(filename, matriz));\par
00165             {\cf19 break};\par
00166         \}\par
00167 \par
00168         {\cf19 case} MANIPULAR_MATRIZ:\par
00169         \{\par
00170             {\cf19 if} (matrizes.empty())\par
00171             \{\par
00172                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00173                 {\cf19 break};\par
00174             \}\par
00175 \par
00176             {\cf20 // Manipula uma matriz armazenada}\par
00177             printMatrizes(matrizes);\par
00178 \par
00179             std::cout << {\cf22 "Qual matriz deseja manipular?"} << std::endl;\par
00180             {\cf18 string} filename;\par
00181             std::getline(std::cin, filename);\par
00182 \par
00183             {\cf19 if} (!existeMatriz(filename, matrizes))\par
00184             \{\par
00185                 std::cout << {\cf22 "Matriz n\'E3o encontrada"} << std::endl;\par
00186                 {\cf19 break};\par
00187             \}\par
00188 \par
00189             std::system({\cf22 "cls||clear"});\par
00190             manipMatrix(matrizes[filename], filename);\par
00191 \par
00192             {\cf19 break};\par
00193         \}\par
00194 \par
00195         {\cf19 case} IMPRIMIR_MATRIZ:\par
00196         \{\par
00197             {\cf19 if} (matrizes.empty())\par
00198             \{\par
00199                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00200                 {\cf19 break};\par
00201             \}\par
00202 \par
00203             {\cf20 // Imprime uma matriz armazenada}\par
00204             std::cout << {\cf22 "Qual matriz deseja imprimir?"} << std::endl;\par
00205             printMatrizes(matrizes);\par
00206             std::cout << {\cf22 "Coloque o nome do arquivo que deseja imprimir: "};\par
00207             {\cf18 string} filename;\par
00208             std::getline(std::cin, filename);\par
00209 \par
00210             {\cf19 if} (existeMatriz(filename, matrizes))\par
00211                 matrizes[filename].print();\par
00212             {\cf19 else}\par
00213                 std::cout << {\cf22 "Matriz n\'E3o encontrada"} << std::endl;\par
00214 \par
00215             {\cf19 break};\par
00216         \}\par
00217 \par
00218         {\cf19 case} SOMAR_MATRIZES:\par
00219         \{\par
00220             {\cf19 if} (matrizes.empty())\par
00221             \{\par
00222                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00223                 {\cf19 break};\par
00224             \}\par
00225 \par
00226             {\cf20 // Soma duas matrizes armazenadas}\par
00227             std::cout << {\cf22 "Quais as matrizes ir\'E1 usar para somar"} << std::endl;\par
00228             printMatrizes(matrizes);\par
00229             std::string filename, filename2;\par
00230             escolherMatrizes(filename, filename2);\par
00231 \par
00232             {\cf19 if} (!existeMatriz(filename, matrizes) || !existeMatriz(filename2, matrizes))\par
00233             \{\par
00234                 std::cout << {\cf22 "Alguma matriz n\'E3o foi encontrada"} << std::endl;\par
00235                 {\cf19 break};\par
00236             \}\par
00237 \par
00238             Matriz matriz;\par
00239 \par
00240             {\cf19 try}\par
00241             \{\par
00242                 matriz = sum(matrizes[filename], matrizes[filename2]);\par
00243             \}\par
00244             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00245             \{\par
00246                 std::cerr << e.what() << {\cf23 '\\n'};\par
00247                 {\cf19 break};\par
00248             \}\par
00249 \par
00250             matriz.print();\par
00251             salvarMatriz(matriz, matrizes);\par
00252             {\cf19 break};\par
00253         \}\par
00254 \par
00255         {\cf19 case} MULTIPLICAR_MATRIZES:\par
00256         \{\par
00257             {\cf19 if} (matrizes.empty())\par
00258             \{\par
00259                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00260                 {\cf19 break};\par
00261             \}\par
00262 \par
00263             {\cf20 // Multiplica duas matrizes armazenadas}\par
00264             std::cout << {\cf22 "Quais as matrizes ir\'E1 usar para multiplicar"} << std::endl;\par
00265             printMatrizes(matrizes);\par
00266             std::string filename, filename2;\par
00267             escolherMatrizes(filename, filename2);\par
00268 \par
00269             {\cf19 if} (!existeMatriz(filename, matrizes) || !existeMatriz(filename2, matrizes))\par
00270             \{\par
00271                 std::cout << {\cf22 "Alguma matriz n\'E3o foi encontrada"} << std::endl;\par
00272                 {\cf19 break};\par
00273             \}\par
00274 \par
00275             Matriz matriz;\par
00276 \par
00277             {\cf19 try}\par
00278             \{\par
00279                 matriz = multiply(matrizes[filename], matrizes[filename2]);\par
00280             \}\par
00281             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00282             \{\par
00283                 std::cerr << e.what() << {\cf23 '\\n'};\par
00284                 {\cf19 break};\par
00285             \}\par
00286 \par
00287             matriz.print();\par
00288             salvarMatriz(matriz, matrizes);\par
00289             {\cf19 break};\par
00290         \}\par
00291 \par
00292         {\cf19 case} SAIR:\par
00293         \{\par
00294             {\cf20 // Encerra o programa}\par
00295             std::cout << {\cf22 "Saindo..."} << std::endl;\par
00296             {\cf19 return} 0;\par
00297         \}\par
00298 \par
00299         {\cf19 default}:\par
00300         \{\par
00301             {\cf20 // Op\'E7\'E3o inv\'E1lida}\par
00302             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00303             std::cin.clear();\par
00304             std::cin.ignore();\par
00305             {\cf19 break};\par
00306         \}\par
00307         \}\par
00308 \par
00309         {\cf20 // Pausa e limpa a tela}\par
00310         std::system({\cf22 "pause || read -p 'Pressione enter para continuar...' var"});\par
00311         std::system({\cf22 "cls||clear"});\par
00312     \}\par
00313 \}\par
}
}
{\xe \v printMatrizes\:main.cpp}
{\xe \v main.cpp\:printMatrizes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} printMatrizes ({\b const} {\b unordered_map} &  {\i matrizes})}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Exibe informa\'E7\'F5es sobre as matrizes armazenadas em um std::unordered_map. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizes} \cell }{Um std::unordered_map que mapeia uma chave (nome da matriz) para uma inst\'E2ncia de uma classe que fornece m\'E9todos getLinhas() e getColunas().\cell }
{\row }
}
As dimens\'F5es exibidas s\'E3o obtidas diretamente da inst\'E2ncia armazenada em cada valor do map. A exibi\'E7\'E3o \'E9 formatada para melhor leitura e compreens\'E3o dos dados de cada matriz. \par
}{
Defini\'E7\'E3o na linha {\b 392} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00393 \{\par
00394     {\cf19 for} ({\cf17 const} {\cf17 auto} &par : matrizes)\par
00395     \{\par
00396         std::cout << {\cf22 "------------------"} << std::endl;\par
00397         std::cout << par.first << {\cf22 " |"} << par.second.getLinhas() << {\cf22 " x "} << par.second.getColunas() << {\cf22 "|"} << std::endl;\par
00398         std::cout << {\cf22 "------------------"} << std::endl;\par
00399     \}\par
00400 \}\par
}
}
{\xe \v readMatrix\:main.cpp}
{\xe \v main.cpp\:readMatrix}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} readMatrix ({\b Matriz} &  {\i matriz}, {\b const} {\b std::string}  {\i filename})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
L\'EA dados de um arquivo e insere em uma matriz esparsa. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o abre um arquivo contendo o n\'FAmero de linhas e colunas de uma matriz, seguido por m\'FAltiplas linhas que descrevem itens n\'E3o nulos da matriz. Cada linha deve conter \'EDndices (i, j) e o valor correspondente.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matriz} \cell }{Refer\'EAncia para o objeto {\b Matriz} que ser\'E1 inicializado e populado. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i filename} \cell }{Nome do arquivo a ser lido (sem o caminho completo).\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Exce\'E7\'F5es\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i std::runtime_error} \cell }{Quando n\'E3o \'E9 poss\'EDvel acessar ou abrir o arquivo.\cell }
{\row }
}
{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O arquivo \'E9 aberto a partir do diret\'F3rio "src/arquivos/" concatenado ao nome do arquivo passado em {\f2 filename} .\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Os primeiros valores lidos do arquivo correspondem ao n\'FAmero de linhas ({\f2 linhas} ) e de colunas ({\f2 colunas} ) para inicializar corretamente a matriz.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Em seguida, cada conjunto de tr\'EAs valores (\'EDndice de linha, \'EDndice de coluna e valor) \'E9 lido e inserido na matriz usando {\f2 matriz.insert()} .\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Caso o arquivo n\'E3o seja encontrado ou ocorra algum outro problema, \'E9 gerada uma exce\'E7\'E3o do tipo {\f2 std::runtime_error} . \par}
}{
Defini\'E7\'E3o na linha {\b 315} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00316 \{\par
00317     std::ifstream file({\cf22 "src/arquivos/"} + filename);\par
00318 \par
00319     {\cf19 if} (!file || !file.is_open())\par
00320         {\cf19 throw} std::runtime_error({\cf22 "Erro ao abrir o arquivo"});\par
00321 \par
00322     {\cf18 int} linhas\{0\}, colunas\{0\};\par
00323     file >> linhas >> colunas;\par
00324 \par
00325     matriz = Matriz(linhas, colunas);\par
00326 \par
00327     {\cf18 int} i\{0\}, j\{0\};\par
00328     {\cf18 double} valor\{0.0f\};\par
00329 \par
00330     {\cf19 while} (file >> i >> j >> valor)\par
00331     \{\par
00332         matriz.insert(i, j, valor);\par
00333     \}\par
00334 \par
00335     file.close();\par
00336 \}\par
}
}
{\xe \v salvarMatriz\:main.cpp}
{\xe \v main.cpp\:salvarMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} salvarMatriz ({\b const} {\b Matriz} &  {\i matriz}, {\b unordered_map} &  {\i matrizes})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Salva uma matriz em um mapa associativo de matrizes, permitindo que seja recuperada posteriormente. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A fun\'E7\'E3o solicita ao usu\'E1rio se deseja salvar a matriz atual. Caso a resposta seja afirmativa, \'E9 solicitado um nome para identificar a nova matriz no mapa. Se esse nome j\'E1 existir, o usu\'E1rio \'E9 informado para tentar novamente com outro nome. Em caso de sucesso, a matriz \'E9 inserida no mapa com a chave fornecida pelo usu\'E1rio, e \'E9 exibida uma mensagem de confirma\'E7\'E3o.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E2metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matriz} \cell }{Objeto do tipo {\b Matriz} que ser\'E1 salvo. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i matrizes} \cell }{Estrutura (unordered_map) onde a matriz ser\'E1 armazenada, associada a um nome (string).\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Observa\'E7\'E3o\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Essa fun\'E7\'E3o n\'E3o retorna valores. \'C9 importante que o usu\'E1rio insira corretamente as op\'E7\'F5es (s ou n) para prosseguir ou cancelar o salvamento, e que forne\'E7a um nome v\'E1lido quando optar por salvar a matriz. \par
}}}{
Defini\'E7\'E3o na linha {\b 343} do arquivo {\b main.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00344 \{\par
00345     {\cf19 while} ({\cf17 true})\par
00346     \{\par
00347         std::cout << {\cf22 "Deseja salvar a matriz? [S/N]: "};\par
00348         {\cf18 char} resposta;\par
00349         std::cin >> resposta;\par
00350         std::cin.ignore();\par
00351 \par
00352         {\cf19 switch} (tolower(resposta))\par
00353         \{\par
00354         {\cf19 case} {\cf23 'n'}:\par
00355             {\cf19 return};\par
00356 \par
00357         {\cf19 case} {\cf23 's'}:\par
00358         \{\par
00359             std::cout << {\cf22 "Digite o nome que deseja salvar a matriz: "};\par
00360             {\cf18 string} filename;\par
00361 \par
00362             std::getline(std::cin, filename);\par
00363 \par
00364             {\cf19 if} (existeMatriz(filename, matrizes))\par
00365             \{\par
00366                 std::cout << {\cf22 "J\'E1 existe uma matriz com esse nome, tente outro nome para salvar"} << std::endl;\par
00367                 {\cf19 break};\par
00368             \}\par
00369 \par
00370             matrizes.insert(std::make_pair(filename, matriz));\par
00371 \par
00372             std::cout << {\cf22 "Matriz salva com sucesso"} << std::endl;\par
00373             {\cf19 return};\par
00374         \}\par
00375 \par
00376         {\cf19 default}:\par
00377             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00378             {\cf19 break};\par
00379         \}\par
00380     \}\par
00381 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp\par \pard\plain 
{\tc\tcl2 \v src/main/main.cpp}
{\xe \v src/main/main.cpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00007 {\cf21 #include <fstream>}\par
00008 {\cf21 #include <unordered_map>}\par
00009 {\cf21 #include "matriz/Matriz.hpp"}\par
00010 {\cf21 #include "utils/utils.hpp"}\par
00011 {\cf21 #include "manipMatriz/manipMatriz.hpp"}\par
00012 \par
00013 {\cf17 using }string = std::string;\par
00014 {\cf17 using }unordered_map = std::unordered_map<string, Matriz>;\par
00015 \par
00016 {\cf17 enum} Opcoes {\cf20 // Enumera\'E7\'E3o para as op\'E7\'F5es do menu}\par
00017 \{\par
00018     LER_MATRIZ = 1,\par
00019     MANIPULAR_MATRIZ,\par
00020     IMPRIMIR_MATRIZ,\par
00021     SOMAR_MATRIZES,\par
00022     MULTIPLICAR_MATRIZES,\par
00023     SAIR\par
00024 \};\par
00025 \par
00048 {\cf18 void} readMatrix(Matriz &matriz, {\cf17 const} std::string filename);\par
00049 \par
00063 {\cf18 bool} existeMatriz({\cf17 const} std::string filename, {\cf17 const} unordered_map &matrizes);\par
00064 \par
00080 {\cf18 void} salvarMatriz({\cf17 const} Matriz &matriz, unordered_map &matrizes);\par
00081 \par
00088 {\cf18 void} escolherMatrizes({\cf18 string} &filename, {\cf18 string} &filename2);\par
00089 \par
00099 {\cf18 void} printMatrizes({\cf17 const} unordered_map &matrizes);\par
00100 \par
00117 {\cf18 int} main()\par
00118 \{\par
00119     {\cf20 // Configura a localiza\'E7\'E3o para suportar caracteres especiais em portugu\'EAs}\par
00120     setlocale(LC_ALL, {\cf22 "pt_BR.UTF-8"});\par
00121 \par
00122     std::cout << {\cf22 "Bem-vindo ao programa de manipula\'E7\'E3o de matrizes esparsas"} << std::endl;\par
00123     std::cout << {\cf22 "-----------------------------------------------------------"} << std::endl;\par
00124 \par
00125     {\cf20 // Mapa associativo para armazenar as matrizes}\par
00126     unordered_map matrizes;\par
00127 \par
00128     {\cf19 while} ({\cf17 true})\par
00129     \{\par
00130         {\cf20 // Exibe o menu de op\'E7\'F5es}\par
00131         std::cout << {\cf22 "Escolha uma op\'E7\'E3o:"} << std::endl;\par
00132         std::cout << {\cf22 "[1] - Ler Matriz"} << std::endl;\par
00133         std::cout << {\cf22 "[2] - Manipular Matriz"} << std::endl;\par
00134         std::cout << {\cf22 "[3] - Imprimir Matriz"} << std::endl;\par
00135         std::cout << {\cf22 "[4] - Somar Matrizes"} << std::endl;\par
00136         std::cout << {\cf22 "[5] - Multiplicar Matrizes"} << std::endl;\par
00137         std::cout << {\cf22 "[6] - Sair"} << std::endl;\par
00138         {\cf18 int} opcao;\par
00139         std::cin >> opcao;\par
00140         std::cin.ignore();\par
00141 \par
00142         {\cf19 switch} (opcao)\par
00143         \{\par
00144         {\cf19 case} LER_MATRIZ:\par
00145         \{\par
00146             {\cf20 // L\'EA uma matriz a partir de um arquivo}\par
00147             {\cf18 string} filename;\par
00148             std::cout << {\cf22 "Digite o nome do arquivo: "};\par
00149             std::getline(std::cin, filename);\par
00150 \par
00151             Matriz matriz;\par
00152 \par
00153             {\cf19 try}\par
00154             \{\par
00155                 readMatrix(matriz, filename);\par
00156             \}\par
00157             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00158             \{\par
00159                 std::cerr << e.what() << {\cf23 '\\n'};\par
00160                 {\cf19 break};\par
00161             \}\par
00162 \par
00163             {\cf20 // Armazena a matriz no mapa associativo}\par
00164             matrizes.insert(std::make_pair(filename, matriz));\par
00165             {\cf19 break};\par
00166         \}\par
00167 \par
00168         {\cf19 case} MANIPULAR_MATRIZ:\par
00169         \{\par
00170             {\cf19 if} (matrizes.empty())\par
00171             \{\par
00172                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00173                 {\cf19 break};\par
00174             \}\par
00175 \par
00176             {\cf20 // Manipula uma matriz armazenada}\par
00177             printMatrizes(matrizes);\par
00178 \par
00179             std::cout << {\cf22 "Qual matriz deseja manipular?"} << std::endl;\par
00180             {\cf18 string} filename;\par
00181             std::getline(std::cin, filename);\par
00182 \par
00183             {\cf19 if} (!existeMatriz(filename, matrizes))\par
00184             \{\par
00185                 std::cout << {\cf22 "Matriz n\'E3o encontrada"} << std::endl;\par
00186                 {\cf19 break};\par
00187             \}\par
00188 \par
00189             std::system({\cf22 "cls||clear"});\par
00190             manipMatrix(matrizes[filename], filename);\par
00191 \par
00192             {\cf19 break};\par
00193         \}\par
00194 \par
00195         {\cf19 case} IMPRIMIR_MATRIZ:\par
00196         \{\par
00197             {\cf19 if} (matrizes.empty())\par
00198             \{\par
00199                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00200                 {\cf19 break};\par
00201             \}\par
00202 \par
00203             {\cf20 // Imprime uma matriz armazenada}\par
00204             std::cout << {\cf22 "Qual matriz deseja imprimir?"} << std::endl;\par
00205             printMatrizes(matrizes);\par
00206             std::cout << {\cf22 "Coloque o nome do arquivo que deseja imprimir: "};\par
00207             {\cf18 string} filename;\par
00208             std::getline(std::cin, filename);\par
00209 \par
00210             {\cf19 if} (existeMatriz(filename, matrizes))\par
00211                 matrizes[filename].print();\par
00212             {\cf19 else}\par
00213                 std::cout << {\cf22 "Matriz n\'E3o encontrada"} << std::endl;\par
00214 \par
00215             {\cf19 break};\par
00216         \}\par
00217 \par
00218         {\cf19 case} SOMAR_MATRIZES:\par
00219         \{\par
00220             {\cf19 if} (matrizes.empty())\par
00221             \{\par
00222                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00223                 {\cf19 break};\par
00224             \}\par
00225 \par
00226             {\cf20 // Soma duas matrizes armazenadas}\par
00227             std::cout << {\cf22 "Quais as matrizes ir\'E1 usar para somar"} << std::endl;\par
00228             printMatrizes(matrizes);\par
00229             std::string filename, filename2;\par
00230             escolherMatrizes(filename, filename2);\par
00231 \par
00232             {\cf19 if} (!existeMatriz(filename, matrizes) || !existeMatriz(filename2, matrizes))\par
00233             \{\par
00234                 std::cout << {\cf22 "Alguma matriz n\'E3o foi encontrada"} << std::endl;\par
00235                 {\cf19 break};\par
00236             \}\par
00237 \par
00238             Matriz matriz;\par
00239 \par
00240             {\cf19 try}\par
00241             \{\par
00242                 matriz = sum(matrizes[filename], matrizes[filename2]);\par
00243             \}\par
00244             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00245             \{\par
00246                 std::cerr << e.what() << {\cf23 '\\n'};\par
00247                 {\cf19 break};\par
00248             \}\par
00249 \par
00250             matriz.print();\par
00251             salvarMatriz(matriz, matrizes);\par
00252             {\cf19 break};\par
00253         \}\par
00254 \par
00255         {\cf19 case} MULTIPLICAR_MATRIZES:\par
00256         \{\par
00257             {\cf19 if} (matrizes.empty())\par
00258             \{\par
00259                 std::cout << {\cf22 "N\'E3o h\'E1 matrizes armazenadas"} << std::endl;\par
00260                 {\cf19 break};\par
00261             \}\par
00262 \par
00263             {\cf20 // Multiplica duas matrizes armazenadas}\par
00264             std::cout << {\cf22 "Quais as matrizes ir\'E1 usar para multiplicar"} << std::endl;\par
00265             printMatrizes(matrizes);\par
00266             std::string filename, filename2;\par
00267             escolherMatrizes(filename, filename2);\par
00268 \par
00269             {\cf19 if} (!existeMatriz(filename, matrizes) || !existeMatriz(filename2, matrizes))\par
00270             \{\par
00271                 std::cout << {\cf22 "Alguma matriz n\'E3o foi encontrada"} << std::endl;\par
00272                 {\cf19 break};\par
00273             \}\par
00274 \par
00275             Matriz matriz;\par
00276 \par
00277             {\cf19 try}\par
00278             \{\par
00279                 matriz = multiply(matrizes[filename], matrizes[filename2]);\par
00280             \}\par
00281             {\cf19 catch} ({\cf17 const} std::exception &e)\par
00282             \{\par
00283                 std::cerr << e.what() << {\cf23 '\\n'};\par
00284                 {\cf19 break};\par
00285             \}\par
00286 \par
00287             matriz.print();\par
00288             salvarMatriz(matriz, matrizes);\par
00289             {\cf19 break};\par
00290         \}\par
00291 \par
00292         {\cf19 case} SAIR:\par
00293         \{\par
00294             {\cf20 // Encerra o programa}\par
00295             std::cout << {\cf22 "Saindo..."} << std::endl;\par
00296             {\cf19 return} 0;\par
00297         \}\par
00298 \par
00299         {\cf19 default}:\par
00300         \{\par
00301             {\cf20 // Op\'E7\'E3o inv\'E1lida}\par
00302             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00303             std::cin.clear();\par
00304             std::cin.ignore();\par
00305             {\cf19 break};\par
00306         \}\par
00307         \}\par
00308 \par
00309         {\cf20 // Pausa e limpa a tela}\par
00310         std::system({\cf22 "pause || read -p 'Pressione enter para continuar...' var"});\par
00311         std::system({\cf22 "cls||clear"});\par
00312     \}\par
00313 \}\par
00314 \par
00315 {\cf18 void} readMatrix(Matriz &matriz, {\cf17 const} std::string filename)\par
00316 \{\par
00317     std::ifstream file({\cf22 "src/arquivos/"} + filename);\par
00318 \par
00319     {\cf19 if} (!file || !file.is_open())\par
00320         {\cf19 throw} std::runtime_error({\cf22 "Erro ao abrir o arquivo"});\par
00321 \par
00322     {\cf18 int} linhas\{0\}, colunas\{0\};\par
00323     file >> linhas >> colunas;\par
00324 \par
00325     matriz = Matriz(linhas, colunas);\par
00326 \par
00327     {\cf18 int} i\{0\}, j\{0\};\par
00328     {\cf18 double} valor\{0.0f\};\par
00329 \par
00330     {\cf19 while} (file >> i >> j >> valor)\par
00331     \{\par
00332         matriz.insert(i, j, valor);\par
00333     \}\par
00334 \par
00335     file.close();\par
00336 \}\par
00337 \par
00338 {\cf18 bool} existeMatriz({\cf17 const} std::string filename, {\cf17 const} unordered_map &matrizes)\par
00339 \{\par
00340     {\cf19 return} matrizes.find(filename) != matrizes.end();\par
00341 \}\par
00342 \par
00343 {\cf18 void} salvarMatriz({\cf17 const} Matriz &matriz, unordered_map &matrizes)\par
00344 \{\par
00345     {\cf19 while} ({\cf17 true})\par
00346     \{\par
00347         std::cout << {\cf22 "Deseja salvar a matriz? [S/N]: "};\par
00348         {\cf18 char} resposta;\par
00349         std::cin >> resposta;\par
00350         std::cin.ignore();\par
00351 \par
00352         {\cf19 switch} (tolower(resposta))\par
00353         \{\par
00354         {\cf19 case} {\cf23 'n'}:\par
00355             {\cf19 return};\par
00356 \par
00357         {\cf19 case} {\cf23 's'}:\par
00358         \{\par
00359             std::cout << {\cf22 "Digite o nome que deseja salvar a matriz: "};\par
00360             {\cf18 string} filename;\par
00361 \par
00362             std::getline(std::cin, filename);\par
00363 \par
00364             {\cf19 if} (existeMatriz(filename, matrizes))\par
00365             \{\par
00366                 std::cout << {\cf22 "J\'E1 existe uma matriz com esse nome, tente outro nome para salvar"} << std::endl;\par
00367                 {\cf19 break};\par
00368             \}\par
00369 \par
00370             matrizes.insert(std::make_pair(filename, matriz));\par
00371 \par
00372             std::cout << {\cf22 "Matriz salva com sucesso"} << std::endl;\par
00373             {\cf19 return};\par
00374         \}\par
00375 \par
00376         {\cf19 default}:\par
00377             std::cout << {\cf22 "Op\'E7\'E3o inv\'E1lida"} << std::endl;\par
00378             {\cf19 break};\par
00379         \}\par
00380     \}\par
00381 \}\par
00382 \par
00383 {\cf18 void} escolherMatrizes({\cf18 string} &filename, {\cf18 string} &filename2)\par
00384 \{\par
00385     std::cout << {\cf22 "Coloque o nome da primeira matriz: "};\par
00386     std::getline(std::cin, filename);\par
00387 \par
00388     std::cout << {\cf22 "Coloque o nome da segunda matriz: "};\par
00389     std::getline(std::cin, filename2);\par
00390 \}\par
00391 \par
00392 {\cf18 void} printMatrizes({\cf17 const} unordered_map &matrizes)\par
00393 \{\par
00394     {\cf19 for} ({\cf17 const} {\cf17 auto} &par : matrizes)\par
00395     \{\par
00396         std::cout << {\cf22 "------------------"} << std::endl;\par
00397         std::cout << par.first << {\cf22 " |"} << par.second.getLinhas() << {\cf22 " x "} << par.second.getColunas() << {\cf22 "|"} << std::endl;\par
00398         std::cout << {\cf22 "------------------"} << std::endl;\par
00399     \}\par
00400 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo src/matriz/Matriz.cpp\par \pard\plain 
{\tc\tcl2 \v src/matriz/Matriz.cpp}
{\xe \v src/matriz/Matriz.cpp}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "matriz/Matriz.hpp"}\par
{\f2 #include <iomanip>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para Matriz.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "Matriz_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Matriz.cpp\par \pard\plain 
{\tc\tcl2 \v src/matriz/Matriz.cpp}
{\xe \v src/matriz/Matriz.cpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "matriz/Matriz.hpp"}\par
00002 {\cf21 #include <iomanip>}\par
00003 \par
00004 Matriz::Matriz() : cabecalho(new Node(0, 0, 0)), linhas(0), colunas(0)\par
00005 \{\par
00006     cabecalho->direita = cabecalho->abaixo = cabecalho;\par
00007 \}\par
00008 \par
00009 Matriz::Matriz({\cf17 const} {\cf18 int} &lin, {\cf17 const} {\cf18 int} &col)\par
00010 \par
00011 \{\par
00012     {\cf19 if} (lin <= 0 || col <= 0)\par
00013         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Tamanho de matriz inv\'E1lido, insira valores maiores que 0"});\par
00014 \par
00015     linhas = lin;\par
00016     colunas = col;\par
00017 \par
00018     cabecalho = {\cf17 new} Node(0, 0, 0);\par
00019     cabecalho->direita = cabecalho->abaixo = cabecalho;\par
00020 \par
00021     Node *auxLinha = cabecalho;\par
00022     {\cf19 for} ({\cf18 int} i = 1; i <= lin; i++)\par
00023     \{\par
00024         Node *novo = {\cf17 new} Node(i, 0, 0);\par
00025         auxLinha->abaixo = novo;\par
00026         novo->direita = novo;\par
00027         auxLinha = novo;\par
00028     \}\par
00029     auxLinha->abaixo = cabecalho;\par
00030 \par
00031     Node *auxColuna = cabecalho;\par
00032     {\cf19 for} ({\cf18 int} j = 1; j <= col; j++)\par
00033     \{\par
00034         Node *novo = {\cf17 new} Node(0, j, 0);\par
00035         auxColuna->direita = novo;\par
00036         novo->abaixo = novo;\par
00037         auxColuna = novo;\par
00038     \}\par
00039     auxColuna->direita = cabecalho;\par
00040 \}\par
00041 \par
00042 Matriz::Matriz({\cf17 const} Matriz &outra) : Matriz(outra.linhas, outra.colunas)\par
00043 \{\par
00044     {\cf19 for} (IteratorM it = outra.begin(); it != outra.end(); ++it)\par
00045         this->insert(it.current->linha, it.current->coluna, *it);\par
00046 \}\par
00047 \par
00048 IteratorM Matriz::begin()\par
00049 \{\par
00050     {\cf19 return} IteratorM(cabecalho->abaixo, cabecalho->abaixo->direita);\par
00051 \}\par
00052 \par
00053 IteratorM Matriz::end()\par
00054 \{\par
00055     {\cf19 return} IteratorM(cabecalho, cabecalho->direita);\par
00056 \}\par
00057 \par
00058 IteratorM Matriz::begin(){\cf17  const}\par
00059 {\cf17 }\{\par
00060     {\cf19 return} IteratorM(cabecalho->abaixo, cabecalho->abaixo->direita);\par
00061 \}\par
00062 \par
00063 IteratorM Matriz::end(){\cf17  const}\par
00064 {\cf17 }\{\par
00065     {\cf19 return} IteratorM(cabecalho, cabecalho->direita);\par
00066 \}\par
00067 \par
00068 Matriz Matriz::operator=(Matriz matriz)\par
00069 \{\par
00070     {\cf20 // Troca os dados do objeto atual com os dados de 'matriz'}\par
00071     std::swap(cabecalho, matriz.cabecalho);\par
00072     std::swap(linhas, matriz.linhas);\par
00073     std::swap(colunas, matriz.colunas);\par
00074     {\cf20 // 'matriz' \'E9 destru\'EDda, liberando os recursos antigos}\par
00075     {\cf19 return} *{\cf17 this};\par
00076 \}\par
00077 \par
00078 {\cf18 int} Matriz::getLinhas(){\cf17  const}\par
00079 {\cf17 }\{\par
00080     {\cf19 return} linhas;\par
00081 \}\par
00082 \par
00083 {\cf18 int} Matriz::getColunas(){\cf17  const}\par
00084 {\cf17 }\{\par
00085     {\cf19 return} colunas;\par
00086 \}\par
00087 \par
00088 Matriz::~Matriz()\par
00089 \{\par
00090     {\cf19 if} (cabecalho == {\cf17 nullptr})\par
00091         {\cf19 return};\par
00092 \par
00093     limpar();\par
00094 \par
00095     Node *linhaAtual = cabecalho->abaixo;\par
00096     {\cf19 while} (linhaAtual != cabecalho)\par
00097     \{\par
00098         Node *proximoLinha = linhaAtual->abaixo;\par
00099         {\cf17 delete} linhaAtual;\par
00100         linhaAtual = proximoLinha;\par
00101     \}\par
00102 \par
00103     Node *colunaAtual = cabecalho->direita;\par
00104     {\cf19 while} (colunaAtual != cabecalho)\par
00105     \{\par
00106         Node *proximoColuna = colunaAtual->direita;\par
00107         {\cf17 delete} colunaAtual;\par
00108         colunaAtual = proximoColuna;\par
00109     \}\par
00110 \par
00111     {\cf17 delete} cabecalho;\par
00112     cabecalho = {\cf17 nullptr};\par
00113 \}\par
00114 \par
00115 {\cf18 void} Matriz::limpar()\par
00116 \{\par
00117     {\cf19 if} (cabecalho == {\cf17 nullptr})\par
00118         {\cf19 return};\par
00119 \par
00120     Node *LinhaAtual = cabecalho->abaixo;\par
00121     {\cf19 if} (LinhaAtual == cabecalho)\par
00122         {\cf19 return};\par
00123 \par
00124     Node *ColunaAtual = LinhaAtual;\par
00125     {\cf19 while} (ColunaAtual->abaixo != cabecalho)\par
00126     \{\par
00127         ColunaAtual = ColunaAtual->abaixo;\par
00128     \}\par
00129     \par
00130     ColunaAtual->abaixo = {\cf17 nullptr};\par
00131 \par
00132     {\cf19 for} (Node *linha = LinhaAtual; linha != {\cf17 nullptr}; linha = linha->abaixo)\par
00133     \{\par
00134 \par
00135         Node *atual = linha->direita;\par
00136         {\cf19 while} (atual != linha)\par
00137         \{\par
00138             Node *proximo = atual->direita; \par
00139             {\cf17 delete} atual;                   \par
00140             atual = proximo;\par
00141         \}\par
00142         linha->direita = linha;\par
00143     \}\par
00144 \par
00145     ColunaAtual = LinhaAtual;\par
00146     {\cf19 while} (ColunaAtual->abaixo != {\cf17 nullptr})\par
00147     \{\par
00148         ColunaAtual = ColunaAtual->abaixo;\par
00149     \}\par
00150     ColunaAtual->abaixo = cabecalho;\par
00151 \}\par
00152 \par
00153 {\cf18 void} Matriz::insert({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ, {\cf17 const} {\cf18 double} &value)\par
00154 \{\par
00155     {\cf19 if} (value == 0)\par
00156         {\cf19 return};\par
00157 \par
00158     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00159         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de inser\'E7\'E3o inv\'E1lido"});\par
00160 \par
00161     Node *linhaAtual = cabecalho;\par
00162     {\cf19 while} (linhaAtual->linha < posI)\par
00163     \{\par
00164         linhaAtual = linhaAtual->abaixo;\par
00165     \}\par
00166 \par
00167     Node *aux = linhaAtual;\par
00168     {\cf19 while} (aux->direita != linhaAtual && aux->direita->coluna < posJ)\par
00169     \{\par
00170         aux = aux->direita;\par
00171     \}\par
00172 \par
00173     {\cf19 if} (aux->direita->coluna == posJ)\par
00174     \{\par
00175         aux->direita->atualizaValor(value); \par
00176         {\cf19 return};\par
00177     \}\par
00178 \par
00179     Node *novo = {\cf17 new} Node(posI, posJ, value);\par
00180 \par
00181     novo->direita = aux->direita;\par
00182     aux->direita = novo;\par
00183 \par
00184     Node *colunaAtual = cabecalho;\par
00185     {\cf19 while} (colunaAtual->coluna < posJ)\par
00186     \{\par
00187         colunaAtual = colunaAtual->direita;\par
00188     \}\par
00189 \par
00190     aux = colunaAtual;\par
00191     {\cf19 while} (aux->abaixo != colunaAtual && aux->abaixo->linha < posI)\par
00192     \{\par
00193         aux = aux->abaixo;\par
00194     \}\par
00195 \par
00196     novo->abaixo = aux->abaixo;\par
00197     aux->abaixo = novo;\par
00198 \}\par
00199 \par
00200 {\cf18 double} Matriz::get({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ)\par
00201 \{\par
00202     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00203         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de acesso inv\'E1lido"});\par
00204 \par
00205     IteratorM it = begin();\par
00206 \par
00207     {\cf19 while} (it != end())\par
00208     \{\par
00209         {\cf19 if} (it.current->linha == posI && it.current->coluna == posJ)\par
00210             {\cf19 return} *it;\par
00211 \par
00212         {\cf19 if} (it.current->linha > posI || (it.current->linha == posI && it.current->coluna > posJ))\par
00213             {\cf19 return} 0;\par
00214 \par
00215         ++it;\par
00216     \}\par
00217 \par
00218     {\cf19 return} 0;\par
00219 \}\par
00220 \par
00221 {\cf18 double} Matriz::get({\cf17 const} {\cf18 int} &posI, {\cf17 const} {\cf18 int} &posJ){\cf17  const}\par
00222 {\cf17 }\{\par
00223     {\cf19 if} (posI <= 0 || posI > linhas || posJ <= 0 || posJ > colunas)\par
00224         {\cf19 throw} std::invalid_argument({\cf22 "Erro: Local de acesso inv\'E1lido"});\par
00225 \par
00226     IteratorM it = begin();\par
00227 \par
00228     {\cf19 while} (it != end())\par
00229     \{\par
00230         {\cf19 if} (it.current->linha == posI && it.current->coluna == posJ)\par
00231             {\cf19 return} *it;\par
00232 \par
00233         {\cf19 if} (it.current->linha > posI || (it.current->linha == posI && it.current->coluna > posJ))\par
00234             {\cf19 return} 0;\par
00235 \par
00236         ++it;\par
00237     \}\par
00238 \par
00239     {\cf19 return} 0;\par
00240 \}\par
00241 \par
00242 {\cf18 void} Matriz::print()\par
00243 \{\par
00244     IteratorM it = begin();\par
00245 \par
00246     {\cf19 for} ({\cf18 int} i = 1; i <= linhas; i++)\par
00247     \{\par
00248         {\cf19 for} ({\cf18 int} j = 1; j <= colunas; j++)\par
00249         \{\par
00250             {\cf19 if} (it.current->linha == i && it.current->coluna == j)\par
00251             \{\par
00252                 std::cout << std::fixed << std::setprecision(1) << *it;\par
00253                 ++it;\par
00254             \}\par
00255             {\cf19 else}\par
00256             \{\par
00257                 std::cout << {\cf22 "0.0"};\par
00258             \}\par
00259             std::cout << {\cf22 " "};\par
00260         \}\par
00261         std::cout << std::endl;\par
00262     \}\par
00263 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo tests/TestMatriz.cpp\par \pard\plain 
{\tc\tcl2 \v tests/TestMatriz.cpp}
{\xe \v tests/TestMatriz.cpp}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de teste para opera\'E7\'F5es com matrizes esparsas. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <stdexcept>}\par
{\f2 #include <chrono>}\par
{\f2 #include "matriz/Matriz.hpp"}\par
{\f2 #include <cassert>}\par
{\f2 #include "utils/utils.hpp"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Gr\'E1fico de depend\'EAncia de inclus\'F5es para TestMatriz.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "TestMatriz_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b testeInsercao} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b testeSoma} ({\b const} {\b Matriz} &{\b A}, {\b const} {\b Matriz} &{\b B}, {\b const} {\b Matriz} &{\b soma})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b testeMultiplicacao} ({\b const} {\b Matriz} &{\b A}, {\b const} {\b Matriz} &{\b B}, {\b const} {\b Matriz} &{\b multi})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Matriz} {\b leitura} ({\b const} {\b std::string} &{\b arquivo})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b bool} {\b arquivoExiste} ({\b const} {\b std::string} &{\b caminho})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b void} {\b testePerformance} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Testa a performance das opera\'E7\'F5es de soma e multiplica\'E7\'E3o de matrizes. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b int} {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Arquivo de teste para opera\'E7\'F5es com matrizes esparsas. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Este arquivo cont\'E9m a fun\'E7\'E3o principal que realiza testes de opera\'E7\'F5es com matrizes esparsas, incluindo leitura de arquivos, soma, multiplica\'E7\'E3o, inser\'E7\'E3o e performance. \par
}{
Defini\'E7\'E3o no arquivo {\b TestMatriz.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v arquivoExiste\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:arquivoExiste}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b bool} arquivoExiste ({\b const} {\b std::string} &  {\i caminho})}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 145} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00146 \{\par
00147     std::ifstream file(caminho);\par
00148     {\cf19 return} file.good();\par
00149 \}\par
}
}
{\xe \v leitura\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:leitura}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Matriz} leitura ({\b const} {\b std::string} &  {\i arquivo})}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 115} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00116 \{\par
00117     std::ifstream file({\cf22 "tests/arquivosTestes/"} + arquivo); {\cf20 // Abre o arquivo}\par
00118     {\cf19 if} (!file.is_open())\par
00119     \{\par
00120         {\cf19 throw} std::runtime_error({\cf22 "Erro ao abrir o arquivo: "} + arquivo);\par
00121     \}\par
00122 \par
00123     {\cf18 int} linhas, colunas;\par
00124     file >> linhas >> colunas;\par
00125 \par
00126     Matriz matriz(linhas, colunas);\par
00127 \par
00128     {\cf18 int} linha, coluna;\par
00129     {\cf18 double} valor;\par
00130     {\cf19 while} (file >> linha >> coluna >> valor)\par
00131     \{                                        {\cf20 // L\'EA os valores da matriz}\par
00132         matriz.insert(linha, coluna, valor); {\cf20 // Insere na matriz}\par
00133     \}\par
00134 \par
00135     file.close(); {\cf20 // Fecha o arquivo}\par
00136     {\cf19 return} matriz;\par
00137 \}\par
}
}
{\xe \v main\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b int} main ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 214} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00215 \{\par
00216     setlocale(LC_ALL, {\cf22 "pt_BR.UTF-8"});\par
00217 \par
00218     {\cf19 try}\par
00219     \{\par
00220         {\cf20 // Verificando se os arquivos existem}\par
00221         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix1.txt"}))\par
00222         \{\par
00223             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matrix1.txt n\'E3o encontrado."});\par
00224         \}\par
00225         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix2.txt"}))\par
00226         \{\par
00227             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matrix2.txt n\'E3o encontrado."});\par
00228         \}\par
00229         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixSoma1.txt"}))\par
00230         \{\par
00231             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrixSoma1.txt n\'E3o encontrado."});\par
00232         \}\par
00233         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixMulti1.txt"}))\par
00234         \{\par
00235             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrizMulti.txt n\'E3o encontrado."});\par
00236         \}\par
00237         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix3.txt"}))\par
00238         \{\par
00239             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matriz3.txt n\'E3o encontrado."});\par
00240         \}\par
00241         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixSoma2.txt"}))\par
00242         \{\par
00243             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrixSoma1.txt n\'E3o encontrado."});\par
00244         \}\par
00245         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixMulti2.txt"}))\par
00246         \{\par
00247             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrizMulti.txt n\'E3o encontrado."});\par
00248         \}\par
00249         \par
00250         {\cf20 // L\'EA as matrizes de arquivos}\par
00251         Matriz A = leitura({\cf22 "Matrix1.txt"});\par
00252         Matriz B = leitura({\cf22 "Matrix2.txt"});\par
00253         std::cout << {\cf22 "Matrizes lidas com sucesso"} << std::endl;\par
00254 \par
00255         std::cout << {\cf22 "Teste 1 usando matrizes com o mesmo tamanho 3x3"} << std::endl;\par
00256         Matriz soma = leitura({\cf22 "MatrixSoma1.txt"});\par
00257         Matriz multi = leitura({\cf22 "MatrixMulti1.txt"});\par
00258         {\cf20 // Executa os testes}\par
00259         testeSoma(A, B, soma);\par
00260         testeMultiplicacao(A, B, multi);\par
00261 \par
00262         std::cout << {\cf22 "Teste 2 usando matrizes com tamanho diferentes, sendo uma 3x3 e outra 4x4 "} << std::endl;\par
00263         Matriz C = leitura({\cf22 "Matrix3.txt"});\par
00264         soma = leitura({\cf22 "MatrixSoma2.txt"});\par
00265         multi = leitura({\cf22 "MatrixMulti2.txt"});\par
00266         std::cout << {\cf22 "Matrizes lidas com sucesso"} << std::endl;\par
00267 \par
00268         {\cf20 // Executa os testes}\par
00269         {\cf19 try} \par
00270         \{\par
00271             \par
00272             testeSoma(A, C, soma);\par
00273             testeMultiplicacao(A, C, multi);\par
00274 \par
00275         \} \par
00276         {\cf19 catch}(std::exception& e) \{\par
00277             std::cerr << e.what() << {\cf22 "\\n"};\par
00278         \}\par
00279 \par
00280         {\cf19 try} \par
00281         \{\par
00282             testeMultiplicacao(A, C, multi);\par
00283 \par
00284         \} \par
00285         {\cf19 catch}(std::exception& e) \{\par
00286             std::cerr << e.what() << {\cf22 "\\n"};\par
00287         \}\par
00288 \par
00289         std::cout << {\cf22 "Testes de inser\'E7\'E3o e de Performance, sendo esta com uma martriz 100x100"} << std::endl;\par
00290         testeInsercao();    {\cf20 // Teste b\'E1sico de inser\'E7\'E3o}\par
00291         testePerformance(); {\cf20 // Teste de performance para matrizes grandes}\par
00292     \par
00293     \}\par
00294     {\cf19 catch} ({\cf17 const} std::runtime_error &e)\par
00295     \{\par
00296         std::cerr << {\cf22 "Erro main: "} << e.what() << std::endl;\par
00297     \}\par
00298 \par
00299     {\cf19 return} 0;\par
00300 \}\par
}
}
{\xe \v testeInsercao\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:testeInsercao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} testeInsercao ()}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 18} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00019 \{\par
00020     Matriz matriz(5, 5);\par
00021     matriz.insert(1, 1, 1);\par
00022     assert(matriz.get(1, 1) == 1); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00023     matriz.insert(5, 5, 2);\par
00024     assert(matriz.get(5, 5) == 2); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00025     matriz.insert(3, 2, 2);\par
00026     assert(matriz.get(3, 2) == 2); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00027     std::cout << {\cf22 "Teste de inser\'E7\'E3o passou"} << std::endl;\par
00028 \}\par
}
}
{\xe \v testeMultiplicacao\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:testeMultiplicacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} testeMultiplicacao ({\b const} {\b Matriz} &  {\i A}, {\b const} {\b Matriz} &  {\i B}, {\b const} {\b Matriz} &  {\i multi})}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 82} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00083 \{\par
00084     Matriz D = multiply(A, B);\par
00085 \par
00086     {\cf20 // Verificando as dimens\'F5es}\par
00087     {\cf19 if} (D.getColunas() != multi.getColunas() || D.getLinhas() != multi.getLinhas())\par
00088     \{\par
00089         {\cf19 throw} std::runtime_error({\cf22 "Erro: Dimens\'F5es incorretas na multiplica\'E7\'E3o das matrizes."});\par
00090     \}\par
00091 \par
00092     {\cf20 // Verificando cada valor da matriz resultante}\par
00093     {\cf19 for} ({\cf18 int} i = 1; i <= multi.getLinhas(); i++)\par
00094     \{\par
00095         {\cf19 for} ({\cf18 int} j = 1; j <= multi.getColunas(); j++)\par
00096         \{\par
00097             {\cf19 if} (D.get(i, j) != multi.get(i, j))\par
00098             \{\par
00099                 {\cf19 throw} std::runtime_error({\cf22 "Erro na multiplica\'E7\'E3o das matrizes: Valor incorreto na posi\'E7\'E3o ("} +\par
00100                                          std::to_string(i) + {\cf22 ", "} + std::to_string(j) + {\cf22 "). Esperado: "} +\par
00101                                          std::to_string(multi.get(i, j)) + {\cf22 ", Obtido: "} + std::to_string(D.get(i, j)));\par
00102             \}\par
00103         \}\par
00104     \}\par
00105 \par
00106     std::cout << {\cf22 "Teste de multiplica\'E7\'E3o passou"} << std::endl;\par
00107 \}\par
}
}
{\xe \v testePerformance\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:testePerformance}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} testePerformance ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Testa a performance das opera\'E7\'F5es de soma e multiplica\'E7\'E3o de matrizes. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Esta fun\'E7\'E3o cria duas matrizes A e B de tamanho 100x100, preenche-as com valores espec\'EDficos, e ent\'E3o mede o tempo necess\'E1rio para realizar a soma e a multiplica\'E7\'E3o dessas matrizes.\par
A matriz A \'E9 preenchida com valores onde cada elemento \'E9 a soma dos \'EDndices de linha e coluna (i + j). A matriz B \'E9 preenchida com valores onde cada elemento \'E9 a diferen\'E7a dos \'EDndices de linha e coluna (i - j).\par
A fun\'E7\'E3o utiliza a biblioteca <chrono> para medir o tempo de execu\'E7\'E3o das opera\'E7\'F5es de soma e multiplica\'E7\'E3o.\par
Passos executados pela fun\'E7\'E3o:{
\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab Cria duas matrizes A e B de tamanho 100x100.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
2.\tab Preenche as matrizes A e B com valores espec\'EDficos.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
3.\tab Exibe uma mensagem indicando que as matrizes foram preenchidas com sucesso.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
4.\tab Mede o tempo necess\'E1rio para somar as matrizes A e B.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
5.\tab Exibe o tempo de execu\'E7\'E3o da soma.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
6.\tab Mede o tempo necess\'E1rio para multiplicar as matrizes A e B.\par
\pard\plain \s141\fi-360\li720\widctlpar\fs20\cgrid 
7.\tab Exibe o tempo de execu\'E7\'E3o da multiplica\'E7\'E3o.\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Retorna\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
void \par
}}}{
Defini\'E7\'E3o na linha {\b 174} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00175 \{\par
00176     Matriz A(100, 100);\par
00177     Matriz B(100, 100);\par
00178 \par
00179     {\cf20 // Preenche as matrizes com valores}\par
00180     {\cf19 for} ({\cf18 int} i = 1; i <= A.getLinhas(); ++i)\par
00181     \{\par
00182         {\cf19 for} ({\cf18 int} j = 1; j <= A.getColunas(); ++j)\par
00183         \{\par
00184             A.insert(i, j, i + j);\par
00185             B.insert(i, j, i - j);\par
00186         \}\par
00187     \}\par
00188     std::cout << {\cf22 "Matrizes preenchidas com sucesso"} << std::endl;\par
00189 \par
00190     std::cout << {\cf22 "Iniciando teste de performance"} << std::endl;\par
00191 \par
00192     {\cf17 auto} inicio = std::chrono::high_resolution_clock::now();\par
00193     Matriz soma = sum(A, B); {\cf20 // Soma as matrizes}\par
00194     {\cf17 auto} fim = std::chrono::high_resolution_clock::now();\par
00195 \par
00196     {\cf17 auto} duracao = std::chrono::duration_cast<std::chrono::milliseconds>(fim - inicio);\par
00197     std::cout << {\cf22 "Tempo para Soma: "} << duracao.count() << {\cf22 "ms"} << std::endl;\par
00198 \par
00199     {\cf17 auto} inicio2 = std::chrono::high_resolution_clock::now();\par
00200     Matriz multi = multiply(A, B); {\cf20 // Soma as matrizes}\par
00201     {\cf17 auto} fim2 = std::chrono::high_resolution_clock::now();\par
00202 \par
00203     {\cf17 auto} duracao2 = std::chrono::duration_cast<std::chrono::milliseconds>(fim2 - inicio2);\par
00204     std::cout << {\cf22 "Tempo para Multipli\'E7\'E3o: "} << duracao2.count() << {\cf22 "ms"} << std::endl;\par
00205 \}\par
}
}
{\xe \v testeSoma\:TestMatriz.cpp}
{\xe \v TestMatriz.cpp\:testeSoma}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b void} testeSoma ({\b const} {\b Matriz} &  {\i A}, {\b const} {\b Matriz} &  {\i B}, {\b const} {\b Matriz} &  {\i soma})}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Defini\'E7\'E3o na linha {\b 42} do arquivo {\b TestMatriz.cpp}.}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00043 \{\par
00044 \par
00045     Matriz D = sum(A, B);\par
00046 \par
00047     {\cf20 // Verificando as dimens\'F5es}\par
00048     {\cf19 if} (D.getColunas() != soma.getColunas() || D.getLinhas() != soma.getLinhas())\par
00049     \{\par
00050         {\cf19 throw} std::runtime_error({\cf22 "Erro: Dimens\'F5es incorretas na soma das matrizes."});\par
00051     \}\par
00052 \par
00053     {\cf20 // Verificando cada valor da matriz resultante}\par
00054     {\cf19 for} ({\cf18 int} i = 1; i <= soma.getLinhas(); i++)\par
00055     \{\par
00056         {\cf19 for} ({\cf18 int} j = 1; j <= soma.getColunas(); j++)\par
00057         \{\par
00058             {\cf19 if} (D.get(i, j) != soma.get(i, j))\par
00059             \{\par
00060                 {\cf19 throw} std::runtime_error({\cf22 "Erro na soma das matrizes: Valor incorreto na posi\'E7\'E3o ("} +\par
00061                                          std::to_string(i) + {\cf22 ", "} + std::to_string(j) + {\cf22 "). Esperado: "} +\par
00062                                          std::to_string(soma.get(i, j)) + {\cf22 ", Obtido: "} + std::to_string(D.get(i, j)));\par
00063             \}\par
00064         \}\par
00065     \}\par
00066 \par
00067     std::cout << {\cf22 "Teste de soma passou"} << std::endl;\par
00068 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestMatriz.cpp\par \pard\plain 
{\tc\tcl2 \v tests/TestMatriz.cpp}
{\xe \v tests/TestMatriz.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <iostream>}\par
00002 {\cf21 #include <fstream>}\par
00003 {\cf21 #include <stdexcept>}\par
00004 {\cf21 #include <chrono>}\par
00005 {\cf21 #include "matriz/Matriz.hpp"}\par
00006 {\cf21 #include <cassert>}\par
00007 {\cf21 #include "utils/utils.hpp"}\par
00008 \par
00009 {\cf20 /*}\par
00010 {\cf20  *   @brief Fun\'E7\'E3o de teste de inser\'E7\'E3o de valores na matriz.}\par
00011 {\cf20  *}\par
00012 {\cf20  *  Esta fun\'E7\'E3o cria uma matriz 5x5 e insere valores em posi\'E7\'F5es espec\'EDficas.}\par
00013 {\cf20  *  Em seguida, a fun\'E7\'E3o verifica se os valores foram inseridos corretamente.}\par
00014 {\cf20  * Se algum valor n\'E3o for inserido corretamente, a fun\'E7\'E3o lan\'E7a uma exce\'E7\'E3o.}\par
00015 {\cf20  *}\par
00016 {\cf20  *   @throw std::runtime_error Se algum valor n\'E3o for inserido corretamente.}\par
00017 {\cf20  */}\par
00018 {\cf18 void} testeInsercao()\par
00019 \{\par
00020     Matriz matriz(5, 5);\par
00021     matriz.insert(1, 1, 1);\par
00022     assert(matriz.get(1, 1) == 1); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00023     matriz.insert(5, 5, 2);\par
00024     assert(matriz.get(5, 5) == 2); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00025     matriz.insert(3, 2, 2);\par
00026     assert(matriz.get(3, 2) == 2); {\cf20 // Garantir que o valor foi inserido corretamente}\par
00027     std::cout << {\cf22 "Teste de inser\'E7\'E3o passou"} << std::endl;\par
00028 \}\par
00029 \par
00030 {\cf20 /*}\par
00031 {\cf20  *    @brief Fun\'E7\'E3o de teste de soma de matrizes.}\par
00032 {\cf20  *}\par
00033 {\cf20  *   Esta fun\'E7\'E3o recebe duas matrizes A e B e a matriz resultante da soma dessas matrizes.}\par
00034 {\cf20  *  A fun\'E7\'E3o calcula a soma das matrizes A e B e compara com a matriz resultante esperada.}\par
00035 {\cf20  * Se a matriz resultante da soma for diferente da matriz esperada, a fun\'E7\'E3o lan\'E7a uma exce\'E7\'E3o.}\par
00036 {\cf20  *}\par
00037 {\cf20  *   @param A Matriz A.}\par
00038 {\cf20  *  @param B Matriz B.}\par
00039 {\cf20  *}\par
00040 {\cf20  *   @throw std::runtime_error Se a matriz resultante da soma for diferente da matriz esperada.}\par
00041 {\cf20  */}\par
00042 {\cf18 void} testeSoma({\cf17 const} Matriz &A, {\cf17 const} Matriz &B, {\cf17 const} Matriz &soma)\par
00043 \{\par
00044 \par
00045     Matriz D = sum(A, B);\par
00046 \par
00047     {\cf20 // Verificando as dimens\'F5es}\par
00048     {\cf19 if} (D.getColunas() != soma.getColunas() || D.getLinhas() != soma.getLinhas())\par
00049     \{\par
00050         {\cf19 throw} std::runtime_error({\cf22 "Erro: Dimens\'F5es incorretas na soma das matrizes."});\par
00051     \}\par
00052 \par
00053     {\cf20 // Verificando cada valor da matriz resultante}\par
00054     {\cf19 for} ({\cf18 int} i = 1; i <= soma.getLinhas(); i++)\par
00055     \{\par
00056         {\cf19 for} ({\cf18 int} j = 1; j <= soma.getColunas(); j++)\par
00057         \{\par
00058             {\cf19 if} (D.get(i, j) != soma.get(i, j))\par
00059             \{\par
00060                 {\cf19 throw} std::runtime_error({\cf22 "Erro na soma das matrizes: Valor incorreto na posi\'E7\'E3o ("} +\par
00061                                          std::to_string(i) + {\cf22 ", "} + std::to_string(j) + {\cf22 "). Esperado: "} +\par
00062                                          std::to_string(soma.get(i, j)) + {\cf22 ", Obtido: "} + std::to_string(D.get(i, j)));\par
00063             \}\par
00064         \}\par
00065     \}\par
00066 \par
00067     std::cout << {\cf22 "Teste de soma passou"} << std::endl;\par
00068 \}\par
00069 \par
00070 {\cf20 /*}\par
00071 {\cf20  *    @brief Fun\'E7\'E3o de teste de multiplica\'E7\'E3o de matrizes.}\par
00072 {\cf20  *}\par
00073 {\cf20  *   Esta fun\'E7\'E3o recebe duas matrizes A e B e a matriz resultante da multiplica\'E7\'E3o dessas matrizes.}\par
00074 {\cf20  *  A fun\'E7\'E3o calcula a multiplica\'E7\'E3o das matrizes A e B e compara com a matriz resultante esperada.}\par
00075 {\cf20  * Se a matriz resultante da multiplica\'E7\'E3o for diferente da matriz esperada, a fun\'E7\'E3o lan\'E7a uma exce\'E7\'E3o.}\par
00076 {\cf20  *}\par
00077 {\cf20  *   @param A Matriz A.}\par
00078 {\cf20  *  @param B Matriz B.}\par
00079 {\cf20  *}\par
00080 {\cf20  *   @throw std::runtime_error Se a matriz resultante da multiplica\'E7\'E3o for diferente da matriz esperada.}\par
00081 {\cf20  */}\par
00082 {\cf18 void} testeMultiplicacao({\cf17 const} Matriz &A, {\cf17 const} Matriz &B, {\cf17 const} Matriz &multi)\par
00083 \{\par
00084     Matriz D = multiply(A, B);\par
00085 \par
00086     {\cf20 // Verificando as dimens\'F5es}\par
00087     {\cf19 if} (D.getColunas() != multi.getColunas() || D.getLinhas() != multi.getLinhas())\par
00088     \{\par
00089         {\cf19 throw} std::runtime_error({\cf22 "Erro: Dimens\'F5es incorretas na multiplica\'E7\'E3o das matrizes."});\par
00090     \}\par
00091 \par
00092     {\cf20 // Verificando cada valor da matriz resultante}\par
00093     {\cf19 for} ({\cf18 int} i = 1; i <= multi.getLinhas(); i++)\par
00094     \{\par
00095         {\cf19 for} ({\cf18 int} j = 1; j <= multi.getColunas(); j++)\par
00096         \{\par
00097             {\cf19 if} (D.get(i, j) != multi.get(i, j))\par
00098             \{\par
00099                 {\cf19 throw} std::runtime_error({\cf22 "Erro na multiplica\'E7\'E3o das matrizes: Valor incorreto na posi\'E7\'E3o ("} +\par
00100                                          std::to_string(i) + {\cf22 ", "} + std::to_string(j) + {\cf22 "). Esperado: "} +\par
00101                                          std::to_string(multi.get(i, j)) + {\cf22 ", Obtido: "} + std::to_string(D.get(i, j)));\par
00102             \}\par
00103         \}\par
00104     \}\par
00105 \par
00106     std::cout << {\cf22 "Teste de multiplica\'E7\'E3o passou"} << std::endl;\par
00107 \}\par
00108 \par
00109 {\cf20 /*}\par
00110 {\cf20  * @brief Fun\'E7\'E3o para ler uma matriz de um arquivo.}\par
00111 {\cf20  *}\par
00112 {\cf20  * @param arquivo Nome do arquivo a ser lido.}\par
00113 {\cf20  * @return Matriz Matriz lida do arquivo.}\par
00114 {\cf20  */}\par
00115 Matriz leitura({\cf17 const} std::string &arquivo)\par
00116 \{\par
00117     std::ifstream file({\cf22 "tests/arquivosTestes/"} + arquivo); {\cf20 // Abre o arquivo}\par
00118     {\cf19 if} (!file.is_open())\par
00119     \{\par
00120         {\cf19 throw} std::runtime_error({\cf22 "Erro ao abrir o arquivo: "} + arquivo);\par
00121     \}\par
00122 \par
00123     {\cf18 int} linhas, colunas;\par
00124     file >> linhas >> colunas;\par
00125 \par
00126     Matriz matriz(linhas, colunas);\par
00127 \par
00128     {\cf18 int} linha, coluna;\par
00129     {\cf18 double} valor;\par
00130     {\cf19 while} (file >> linha >> coluna >> valor)\par
00131     \{                                        {\cf20 // L\'EA os valores da matriz}\par
00132         matriz.insert(linha, coluna, valor); {\cf20 // Insere na matriz}\par
00133     \}\par
00134 \par
00135     file.close(); {\cf20 // Fecha o arquivo}\par
00136     {\cf19 return} matriz;\par
00137 \}\par
00138 \par
00139 {\cf20 /*}\par
00140 {\cf20  * @brief fun\'E7\'E3o para verificar se um arquivo existe}\par
00141 {\cf20  *}\par
00142 {\cf20  * @param caminho Caminho do arquivo a ser verificado.}\par
00143 {\cf20  * @return bool Verdadeiro se o arquivo existir, falso caso contr\'E1rio.}\par
00144 {\cf20  */}\par
00145 {\cf18 bool} arquivoExiste({\cf17 const} std::string &caminho)\par
00146 \{\par
00147     std::ifstream file(caminho);\par
00148     {\cf19 return} file.good();\par
00149 \}\par
00150 \par
00174 {\cf18 void} testePerformance()\par
00175 \{\par
00176     Matriz A(100, 100);\par
00177     Matriz B(100, 100);\par
00178 \par
00179     {\cf20 // Preenche as matrizes com valores}\par
00180     {\cf19 for} ({\cf18 int} i = 1; i <= A.getLinhas(); ++i)\par
00181     \{\par
00182         {\cf19 for} ({\cf18 int} j = 1; j <= A.getColunas(); ++j)\par
00183         \{\par
00184             A.insert(i, j, i + j);\par
00185             B.insert(i, j, i - j);\par
00186         \}\par
00187     \}\par
00188     std::cout << {\cf22 "Matrizes preenchidas com sucesso"} << std::endl;\par
00189 \par
00190     std::cout << {\cf22 "Iniciando teste de performance"} << std::endl;\par
00191 \par
00192     {\cf17 auto} inicio = std::chrono::high_resolution_clock::now();\par
00193     Matriz soma = sum(A, B); {\cf20 // Soma as matrizes}\par
00194     {\cf17 auto} fim = std::chrono::high_resolution_clock::now();\par
00195 \par
00196     {\cf17 auto} duracao = std::chrono::duration_cast<std::chrono::milliseconds>(fim - inicio);\par
00197     std::cout << {\cf22 "Tempo para Soma: "} << duracao.count() << {\cf22 "ms"} << std::endl;\par
00198 \par
00199     {\cf17 auto} inicio2 = std::chrono::high_resolution_clock::now();\par
00200     Matriz multi = multiply(A, B); {\cf20 // Soma as matrizes}\par
00201     {\cf17 auto} fim2 = std::chrono::high_resolution_clock::now();\par
00202 \par
00203     {\cf17 auto} duracao2 = std::chrono::duration_cast<std::chrono::milliseconds>(fim2 - inicio2);\par
00204     std::cout << {\cf22 "Tempo para Multipli\'E7\'E3o: "} << duracao2.count() << {\cf22 "ms"} << std::endl;\par
00205 \}\par
00206 \par
00214 {\cf18 int} main()\par
00215 \{\par
00216     setlocale(LC_ALL, {\cf22 "pt_BR.UTF-8"});\par
00217 \par
00218     {\cf19 try}\par
00219     \{\par
00220         {\cf20 // Verificando se os arquivos existem}\par
00221         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix1.txt"}))\par
00222         \{\par
00223             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matrix1.txt n\'E3o encontrado."});\par
00224         \}\par
00225         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix2.txt"}))\par
00226         \{\par
00227             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matrix2.txt n\'E3o encontrado."});\par
00228         \}\par
00229         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixSoma1.txt"}))\par
00230         \{\par
00231             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrixSoma1.txt n\'E3o encontrado."});\par
00232         \}\par
00233         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixMulti1.txt"}))\par
00234         \{\par
00235             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrizMulti.txt n\'E3o encontrado."});\par
00236         \}\par
00237         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/Matrix3.txt"}))\par
00238         \{\par
00239             {\cf19 throw} std::runtime_error({\cf22 "Arquivo Matriz3.txt n\'E3o encontrado."});\par
00240         \}\par
00241         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixSoma2.txt"}))\par
00242         \{\par
00243             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrixSoma1.txt n\'E3o encontrado."});\par
00244         \}\par
00245         {\cf19 if} (!arquivoExiste({\cf22 "tests/arquivosTestes/MatrixMulti2.txt"}))\par
00246         \{\par
00247             {\cf19 throw} std::runtime_error({\cf22 "Arquivo MatrizMulti.txt n\'E3o encontrado."});\par
00248         \}\par
00249         \par
00250         {\cf20 // L\'EA as matrizes de arquivos}\par
00251         Matriz A = leitura({\cf22 "Matrix1.txt"});\par
00252         Matriz B = leitura({\cf22 "Matrix2.txt"});\par
00253         std::cout << {\cf22 "Matrizes lidas com sucesso"} << std::endl;\par
00254 \par
00255         std::cout << {\cf22 "Teste 1 usando matrizes com o mesmo tamanho 3x3"} << std::endl;\par
00256         Matriz soma = leitura({\cf22 "MatrixSoma1.txt"});\par
00257         Matriz multi = leitura({\cf22 "MatrixMulti1.txt"});\par
00258         {\cf20 // Executa os testes}\par
00259         testeSoma(A, B, soma);\par
00260         testeMultiplicacao(A, B, multi);\par
00261 \par
00262         std::cout << {\cf22 "Teste 2 usando matrizes com tamanho diferentes, sendo uma 3x3 e outra 4x4 "} << std::endl;\par
00263         Matriz C = leitura({\cf22 "Matrix3.txt"});\par
00264         soma = leitura({\cf22 "MatrixSoma2.txt"});\par
00265         multi = leitura({\cf22 "MatrixMulti2.txt"});\par
00266         std::cout << {\cf22 "Matrizes lidas com sucesso"} << std::endl;\par
00267 \par
00268         {\cf20 // Executa os testes}\par
00269         {\cf19 try} \par
00270         \{\par
00271             \par
00272             testeSoma(A, C, soma);\par
00273             testeMultiplicacao(A, C, multi);\par
00274 \par
00275         \} \par
00276         {\cf19 catch}(std::exception& e) \{\par
00277             std::cerr << e.what() << {\cf22 "\\n"};\par
00278         \}\par
00279 \par
00280         {\cf19 try} \par
00281         \{\par
00282             testeMultiplicacao(A, C, multi);\par
00283 \par
00284         \} \par
00285         {\cf19 catch}(std::exception& e) \{\par
00286             std::cerr << e.what() << {\cf22 "\\n"};\par
00287         \}\par
00288 \par
00289         std::cout << {\cf22 "Testes de inser\'E7\'E3o e de Performance, sendo esta com uma martriz 100x100"} << std::endl;\par
00290         testeInsercao();    {\cf20 // Teste b\'E1sico de inser\'E7\'E3o}\par
00291         testePerformance(); {\cf20 // Teste de performance para matrizes grandes}\par
00292     \par
00293     \}\par
00294     {\cf19 catch} ({\cf17 const} std::runtime_error &e)\par
00295     \{\par
00296         std::cerr << {\cf22 "Erro main: "} << e.what() << std::endl;\par
00297     \}\par
00298 \par
00299     {\cf19 return} 0;\par
00300 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par 
\pard\plain 
{\tc \v Sum\'E1rio}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
